This is zsh.info, produced by makeinfo version 4.11 from ./zsh.texi.

INFO-DIR-SECTION Utilities
START-INFO-DIR-ENTRY
* ZSH: (zsh).                     The Z Shell Manual.
END-INFO-DIR-ENTRY


File: zsh.info,  Node: Completion System Configuration,  Next: Control Functions,  Prev: Initialization,  Up: Completion System

20.3 Completion System Configuration
====================================



This section gives a short overview of how the completion system works,
and then more detail on how users can configure how and when matches are
generated.



20.3.1 Overview
---------------

When completion is attempted somewhere on the command line the
completion system first works out the context.  This takes account of a
number of things including the command word (such as `grep' or `zsh')
and options to which the current word may be an argument (such as the
`-o' option to zsh which takes a shell option as an argument).

This context information is condensed into a string consisting of
multiple fields separated by colons, referred to simply as `the context'
in the remainder of the documentation.  This is used to look up
_styles_, context-sensitive options that can be used to configure the
completion system.  The context used for lookup may vary during the same
call to the completion system.

The context string always consists of a fixed set of fields, separated
by colons and with a leading colon before the first, in the form
:completion:FUNCTION:COMPLETER:COMMAND:ARGUMENT:tag.  These have the
following meaning:


   * The literal string completion, saying that this style is used by
     the completion system.  This distinguishes the context from those
     used by, for example, zle widgets and ZFTP functions.

   * The FUNCTION, if completion is called from a named widget rather
     than through the normal completion system.  Typically this is
     blank, but it is set by special widgets such as predict-on and the
     various functions in the Widget directory of the distribution to
     the name of that function, often in an abbreviated form.

   * The COMPLETER currently active, the name of the function without
     the leading underscore and with other underscores converted to
     hyphens.  A `completer' is in overall control of how completion is
     to be performed; `complete' is the simplest, but other completers
     exist to perform related tasks such as correction, or to modify
     the behaviour of a later completer.  See *note Control Functions::
     for more information.

   * The COMMAND or a special -CONTEXT-, just at it appears following
     the #compdef tag or the compdef function.  Completion functions
     for commands that have sub-commands usually modify this field to
     contain the name of the command followed by a minus sign and the
     sub-command.  For example, the completion function for the cvs
     command sets this field to cvs-add when completing arguments to
     the add subcommand.

   * The ARGUMENT; this indicates which command line or option argument
     we are completing.  For command arguments this generally takes the
     form argument-N, where N is the number of the argument, and for
     arguments to options the form option-OPT-N where N is the number
     of the argument to option OPT.  However, this is only the case if
     the command line is parsed with standard UNIX-style options and
     arguments, so many completions do not set this.

   * The TAG.  As described previously, tags are used to discriminate
     between the types of matches a completion function can generate in
     a certain context.  Any completion function may use any tag name
     it likes, but a list of the more common ones is given below.


The context is gradually put together as the functions are executed,
starting with the main entry point, which adds :completion: and the
FUNCTION element if necessary.  The completer then adds the COMPLETER
element.  The contextual completion adds the COMMAND and ARGUMENT
options.  Finally, the TAG is added when the types of completion are
known.  For example, the context name


     :completion::complete:dvips:option-o-1:files

says that normal completion was attempted as the first argument to the
option -o of the command dvips:


     dvips -o ...

and the completion function will generate filenames.

Usually completion will be tried for all possible tags in an order given
by the completion function.  However, this can be altered by using the
tag-order style.  Completion is then restricted to the list of given
tags in the given order.

The _complete_help bindable command shows all the contexts and tags
available for completion at a particular point.  This provides an easy
way of finding information for tag-order and other styles.  It is
described in *note Bindable Commands::.

Styles determine such things as how the matches are generated, similarly
to shell options but with much more control.  They can have any number
of strings as their value.  They are defined with the zstyle builtin
command (*note The zsh/zutil Module::).

When looking up styles the completion system uses full context names,
including the tag.  Looking up the value of a style therefore consists
of two things:  the context, which may be matched as a pattern, and the
name of the style itself, which must be given exactly.

For example, many completion functions can generate matches in a simple
and a verbose form and use the verbose style to decide which form
should be used.  To make all such functions use the verbose form, put


     zstyle ':completion:*' verbose yes

in a startup file (probably .zshrc).  This gives the verbose style the
value yes in every context inside the completion system, unless that
context has a more specific definition.  It is best to avoid giving the
context as `*' in case the style has some meaning outside the
completion system.

Many such general purpose styles can be configured simply by using the
compinstall function.

A more specific example of the use of the verbose style is by the
completion for the kill builtin.  If the style is set, the builtin
lists full job texts and process command lines; otherwise it shows the
bare job numbers and PIDs.  To turn the style off for this use only:


     zstyle ':completion:*:*:kill:*' verbose no

For even more control, the style can use one of the tags `jobs' or
`processes'.  To turn off verbose display only for jobs:


     zstyle ':completion:*:*:kill:*:jobs' verbose no

The -e option to zstyle even allows completion function code to appear
as the argument to a style; this requires some understanding of the
internals of completion functions (see *note Completion Widgets::)).
For example,


     zstyle -e ':completion:*' hosts 'reply=($myhosts)'

This forces the value of the hosts style to be read from the variable
myhosts each time a host name is needed; this is useful if the value of
myhosts can change dynamically.  For another useful example, see the
example in the description of the file-list style below.  This form can
be slow and should be avoided for commonly examined styles such as menu
and list-rows-first.

Note that the order in which styles are _defined_ does not matter; the
style mechanism uses the most specific possible match for a particular
style to determine the set of values.  More precisely, strings are
preferred over patterns (for example, `:completion::complete:foo' is
more specific than `:completion::complete:*'), and longer patterns are
preferred over shorter patterns.

Style names like those of tags are arbitrary and depend on the
completion function.  However, the following two sections list some of
the most common tags and styles.



20.3.2 Standard Tags
--------------------



Some of the following are only used when looking up particular styles
and do not refer to a type of match.


accounts
     used to look up the users-hosts style

all-expansions
     used by the _expand completer when adding the single string
     containing all possible expansions

all-files
     for the names of all files (as distinct from a particular subset,
     see the globbed-files tag).

arguments
     for arguments to a command

arrays
     for names of array parameters

association-keys
     for keys of associative arrays; used when completing inside a
     subscript to a parameter of this type

bookmarks
     when completing bookmarks (e.g. for URLs and the zftp function
     suite)

builtins
     for names of builtin commands

characters
     for single characters in arguments of commands such as stty.
     Also used when completing character classes after an opening
     bracket

colormapids
     for X colormap ids

colors
     for color names

commands
     for names of external commands.  Also used by complex commands
     such as cvs when completing names subcommands.

contexts
     for contexts in arguments to the zstyle builtin command

corrections
     used by the _approximate and _correct completers for possible
     corrections

cursors
     for cursor names used by X programs

default
     used in some contexts to provide a way of supplying a default when
     more specific tags are also valid.  Note that this tag is used
     when only the FUNCTION field of the context name is set

descriptions
     used when looking up the value of the format style to generate
     descriptions for types of matches

devices
     for names of device special files

directories
     for names of directories

directory-stack
     for entries in the directory stack

displays
     for X display names

domains
     for network domains

expansions
     used by the _expand completer for individual words (as opposed to
     the complete set of expansions) resulting from the expansion of a
     word on the command line

extensions
     for X server extensions

file-descriptors
     for numbers of open file descriptors

files
     the generic file-matching tag used by functions completing
     filenames

fonts
     for X font names

fstypes
     for file system types (e.g. for the mount command)

functions
     names of functions -- normally shell functions, although certain
     commands may understand other kinds of function

globbed-files
     for filenames when the name has been generated by pattern matching

groups
     for names of user groups

history-words
     for words from the history

hosts
     for hostnames

indexes
     for array indexes

jobs
     for jobs (as listed by the `jobs' builtin)

interfaces
     for network interfaces

keymaps
     for names of zsh keymaps

keysyms
     for names of X keysyms

libraries
     for names of system libraries

limits
     for system limits

local-directories
     for names of directories that are subdirectories of the current
     working directory when completing arguments of cd and related
     builtin commands (compare path-directories)

manuals
     for names of manual pages

mailboxes
     for e-mail folders

maps
     for map names (e.g. NIS maps)

messages
     used to look up the format style for messages

modifiers
     for names of X modifiers

modules
     for modules (e.g. zsh modules)

my-accounts
     used to look up the users-hosts style

named-directories
     for named directories (you wouldn't have guessed that, would you?)

names
     for all kinds of names

newsgroups
     for USENET groups

nicknames
     for nicknames of NIS maps

options
     for command options

original
     used by the _approximate, _correct and _expand completers when
     offering the original string as a match

other-accounts
     used to look up the users-hosts style

other-files
     for the names of any non-directory files.  This is used instead of
     all-files when the list-dirs-first style is in effect.

packages
     for packages (e.g. rpm or installed Debian packages)

parameters
     for names of parameters

path-directories
     for names of directories found by searching the cdpath array when
     completing arguments of cd and related builtin commands (compare
     local-directories)

paths
     used to look up the values of the expand, ambiguous and
     special-dirs styles

pods
     for perl pods (documentation files)

ports
     for communication ports

prefixes
     for prefixes (like those of a URL)

printers
     for print queue names

processes
     for process identifiers

processes-names
     used to look up the command style when generating the names of
     processes for killall

sequences
     for sequences (e.g. mh sequences)

sessions
     for sessions in the zftp function suite

signals
     for signal names

strings
     for strings (e.g. the replacement strings for the cd builtin
     command)

styles
     for styles used by the zstyle builtin command

suffixes
     for filename extensions

tags
     for tags (e.g. rpm tags)

targets
     for makefile targets

time-zones
     for time zones (e.g. when setting the TZ parameter)

types
     for types of whatever (e.g. address types for the xhost command)

urls
     used to look up the urls and local styles when completing URLs

users
     for usernames

values
     for one of a set of values in certain lists

variant
     used by _pick_variant to look up the command to run when
     determining what program is installed for a particular command
     name.

visuals
     for X visuals

warnings
     used to look up the format style for warnings

widgets
     for zsh widget names

windows
     for IDs of X windows

zsh-options
     for shell options



20.3.3 Standard Styles
----------------------



Note that the values of several of these styles represent boolean
values.  Any of the strings `true', `on', `yes', and `1' can be used
for the value `true' and any of the strings `false', `off', `no', and
`0' for the value `false'.  The behavior for any other value is
undefined except where explicitly mentioned.  The default value may be
either true or false if the style is not set.

Some of these styles are tested first for every possible tag
corresponding to a type of match, and if no style was found, for the
default tag.  The most notable styles of this type are menu,
list-colors and styles controlling completion listing such as
list-packed and last-prompt).  When tested for the default tag, only
the FUNCTION field of the context will be set so that a style using the
default tag will normally be defined along the lines of:


     zstyle ':completion:*:default' menu ...


accept-exact
     This is tested for the default tag in addition to the tags valid
     for the current context.  If it is set to `true' and any of the
     trial matches is the same as the string on the command line, this
     match will immediately be accepted (even if it would otherwise be
     considered ambiguous).

     When completing pathnames (where the tag used is `paths') this
     style accepts any number of patterns as the value in addition to
     the boolean values.  Pathnames matching one of these patterns will
     be accepted immediately even if the command line contains some
     more partially typed pathname components and these match no file
     under the directory accepted.

     This style is also used by the _expand completer to decide if
     words beginning with a tilde or parameter expansion should be
     expanded.  For example, if there are parameters foo and foobar,
     the string `$foo' will only be expanded if accept-exact is set to
     `true'; otherwise the completion system will be allowed to
     complete $foo to $foobar. If the style is set to `continue',
     _expand will add the expansion as a match and the completion
     system will also be allowed to continue.

accept-exact-dirs
     This is used by filename completion.  Unlike accept-exact it is a
     boolean.  By default, filename completion examines all components
     of a path to see if there are completions of that component, even
     if the component matches an existing directory.  For example, when
     completion after /usr/bin/, the function examines possible
     completions to /usr.

     When this style is true, any prefix of a path that matches an
     existing directory is accepted without any attempt to complete it
     further.  Hence, in the given example, the path /usr/bin/ is
     accepted immediately and completion tried in that directory.

add-space
     This style is used by the _expand completer.  If it is true (the
     default), a space will be inserted after all words resulting from
     the expansion, or a slash in the case of directory names.  If the
     value is `file', the completer will only add a space to names of
     existing files.  Either a boolean true or the value `file' may be
     combined with `subst', in which case the completer will not add a
     space to words generated from the expansion of a substitution of
     the form `$(...)' or `${...}'.

     The _prefix completer uses this style as a simple boolean value to
     decide if a space should be inserted before the suffix.

ambiguous
     This applies when completing non-final components of filename
     paths, in other words those with a trailing slash.  If it is set,
     the cursor is left after the first ambiguous component, even if
     menu completion is in use.  The style is always tested with the
     paths tag.

assign-list
     When completing after an equals sign that is being treated as an
     assignment, the completion system normally completes only one
     filename.  In some cases the value  may be a list of filenames
     separated by colons, as with PATH and similar parameters.  This
     style can be set to a list of patterns matching the names of such
     parameters.

     The default is to complete lists when the word on the line already
     contains a colon.

auto-description
     If set, this style's value will be used as the description for
     options that are not described by the completion functions, but
     that have exactly one argument.  The sequence `%d' in the value
     will be replaced by the description for this argument.  Depending
     on personal preferences, it may be useful to set this style to
     something like `specify: %d'.  Note that this may not work for
     some commands.

avoid-completer
     This is used by the _all_matches completer to decide if the string
     consisting of all matches should be added to the list currently
     being generated.  Its value is a list of names of completers.  If
     any of these is the name of the completer that generated the
     matches in this completion, the string will not be added.

     The default value for this style is `_expand _old_list _correct
     _approximate', i.e. it contains the completers for which a string
     with all matches will almost never be wanted.

cache-path
     This style defines the path where any cache files containing dumped
     completion data are stored.  It defaults to
     `$ZDOTDIR/.zcompcache', or `$HOME/.zcompcache' if $ZDOTDIR is not
     defined.  The completion cache will not be used unless the
     use-cache style is set.

cache-policy
     This style defines the function that will be used to determine
     whether a cache needs rebuilding.  See the section on the
     _cache_invalid function below.

call-command
     This style is used in the function for commands such as make and
     ant where calling the command directly to generate matches suffers
     problems such as being slow or, as in the case of make can
     potentially causes actions in the makefile to be executed. If it
     is set to `true' the command is called to generate matches. The
     default value of this style is `false'.

command
     In many places, completion functions need to call external
     commands to generate the list of completions.  This style can be
     used to override the command that is called in some such cases.
     The elements of the value are joined with spaces to form a command
     line to execute.  The value can also start with a hyphen, in which
     case the usual command will be added to the end; this is most
     useful for putting `builtin' or `command' in front to make sure
     the appropriate version of a command is called, for example to
     avoid calling a shell function with the same name as an external
     command.

     As an example, the completion function for process IDs uses this
     style with the processes tag to generate the IDs to complete and
     the list of processes to display (if the verbose style is `true').
     The list produced by the command should look like the output of the
     ps command.  The first line is not displayed, but is searched for
     the string `PID' (or `pid') to find the position of the process
     IDs in the following lines.  If the line does not contain `PID',
     the first numbers in each of the other lines are taken as the
     process IDs to complete.

     Note that the completion function generally has to call the
     specified command for each attempt to generate the completion
     list.  Hence care should be taken to specify only commands that
     take a short time to run, and in particular to avoid any that may
     never terminate.

command-path
     This is a list of directories to search for commands to complete.
     The default for this style is the value of the special parameter
     path.

commands
     This is used by the function completing sub-commands for the system
     initialisation scripts (residing in /etc/init.d or somewhere not
     too far away from that).  Its values give the default commands to
     complete for those commands for which the completion function isn't
     able to find them out automatically.  The default for this style
     are the two strings `start' and `stop'.

complete
     This is used by the _expand_alias function when invoked as a
     bindable command.  If it set to `true' and the word on the command
     line is not the name of an alias, matching alias names will be
     completed.

complete-options
     This is used by the completer for cd, chdir and pushd.  For these
     commands a - is used to introduce a directory stack entry and
     completion of these is far more common than completing options.
     Hence unless the value of this style is true options will not be
     completed, even after an initial -.  If it is true, options will
     be completed after an initial - unless there is a preceding -- on
     the command line.

completer
     The strings given as the value of this style provide the names of
     the completer functions to use. The available completer functions
     are described in *note Control Functions::.

     Each string may be either the name of a completer function or a
     string of the form `FUNCTION:NAME'.  In the first case the
     COMPLETER field of the context will contain the name of the
     completer without the leading underscore and with all other
     underscores replaced by hyphens.  In the second case the FUNCTION
     is the name of the completer to call, but the context will contain
     the user-defined NAME in the COMPLETER field of the context.  If
     the NAME starts with a hyphen, the string for the context will be
     build from the name of the completer function as in the first case
     with the NAME appended to it.  For example:


          zstyle ':completion:*' completer _complete _complete:-foo

     Here, completion will call the _complete completer twice, once
     using `complete' and once using `complete-foo' in the COMPLETER
     field of the context.  Normally, using the same completer more
     than once only makes sense when used with the `FUNCTIONS:NAME'
     form, because otherwise the context name will be the same in all
     calls to the completer; possible exceptions to this rule are the
     _ignored and _prefix completers.

     The default value for this style is `_complete _ignored': only
     completion will be done, first using the ignored-patterns style
     and the $fignore array and then without ignoring matches.

condition
     This style is used by the _list completer function to decide if
     insertion of matches should be delayed unconditionally. The
     default is `true'.

delimiters
     This style is used when adding a delimiter for use with history
     modifiers or glob qualifiers that have delimited arguments.  It is
     an array of preferred delimiters to add.  Non-special characters
     are preferred as the completion system may otherwise become
     confused.  The default list is :, +, /, -, %.  The list may be
     empty to force a delimiter to be typed.

disabled
     If this is set to `true', the _expand_alias completer and bindable
     command will try to expand disabled aliases, too.  The default is
     `false'.

domains
     A list of names of network domains for completion.  If this is not
     set, domain names will be taken from the file /etc/resolv.conf.

environ
     The environ style is used when completing for `sudo'.  It is set
     to an array of `VAR=VALUE' assignments to be exported into the
     local environment before the completion for the target command is
     invoked.
          zstyle :complete:sudo: environ \
            PATH="/sbin:/usr/sbin:$PATH" HOME="/root"

expand
     This style is used when completing strings consisting of multiple
     parts, such as path names.

     If one of its values is the string `prefix', the partially typed
     word from the line will be expanded as far as possible even if
     trailing parts cannot be completed.

     If one of its values is the string `suffix', matching names for
     components after the first ambiguous one will also be added.  This
     means that the resulting string is the longest unambiguous string
     possible.  However, menu completion can be used to cycle through
     all matches.

fake
     This style may be set for any completion context.  It specifies
     additional strings that will always be completed in that context.
     The form of each string is `VALUE:DESCRIPTION'; the colon and
     description may be omitted, but any literal colons in VALUE must
     be quoted with a backslash.  Any DESCRIPTION provided is shown
     alongside the value in completion listings.

     It is important to use a sufficiently restrictive context when
     specifying fake strings.  Note that the styles fake-files and
     fake-parameters provide additional features when completing files
     or parameters.

fake-always
     This works identically to the fake style except that the
     ignored-patterns style is not applied to it.  This makes it
     possible to override a set of matches completely by setting the
     ignored patterns to `*'.

     The following shows a way of supplementing any tag with arbitrary
     data, but having it behave for display purposes like a separate
     tag.  In this example we use the features of the tag-order style
     to divide the named-directories tag into two when performing
     completion with the standard completer complete for arguments of
     cd.  The tag named-directories-normal behaves as normal, but the
     tag named-directories-mine contains a fixed set of directories.
     This has the effect of adding the match group `extra directories'
     with the given completions.


          zstyle ':completion::complete:cd:*' tag-order \
            'named-directories:-mine:extra\ directories
            named-directories:-normal:named\ directories *'
          zstyle ':completion::complete:cd:*:named-directories-mine' \
            fake-always mydir1 mydir2
          zstyle ':completion::complete:cd:*:named-directories-mine' \
            ignored-patterns '*'

fake-files
     This style is used when completing files and looked up without a
     tag.  Its values are of the form `DIR:NAMES...'.  This will add
     the NAMES (strings separated by spaces) as possible matches when
     completing in the directory DIR, even if no such files really
     exist.  The dir may be a pattern; pattern characters or colons in
     DIR should be quote with a backslash to be treated literally.

     This can be useful on systems that support special filesystems
     whose top-level pathnames can not be listed or generated with glob
     patterns.  It can also be used for directories for which one does
     not have read permission.

     The pattern form can be used to add a certain `magic' entry to all
     directories on a particular filing system.

fake-parameters
     This is used by the completion function for parameter names.  Its
     values are names of parameters that might not yet be set but
     should be completed nonetheless.  Each name may also be followed
     by a colon and a string specifying the type of the parameter (like
     `scalar', `array' or `integer').  If the type is given, the name
     will only be completed if parameters of that type are required in
     the particular context.  Names for which no type is specified will
     always be completed.

file-list
     This style controls whether files completed using the standard
     builtin mechanism are to be listed with a long list similar to ls
     -l.  Note that this feature uses the shell module zsh/stat for
     file information; this loads the builtin stat which will replace
     any external stat executable.  To avoid this the following code
     can be included in an initialization file:


          zmodload -i zsh/stat
          disable stat

     The style may either be set to a true value (or `all'), or one of
     the values `insert' or `list', indicating that files are to be
     listed in long format in all circumstances, or when attempting to
     insert a file name, or when listing file names without attempting
     to insert one.

     More generally, the value may be an array of any of the above
     values, optionally followed by =NUM.  If NUM is present it gives
     the maximum number of matches for which long listing style will be
     used.  For example,


          zstyle ':completion:*' file-list list=20 insert=10

     specifies that long format will be used when listing up to 20 files
     or inserting a file with up to 10 matches (assuming a listing is
     to be shown at all, for example on an ambiguous completion), else
     short format will be used.


          zstyle -e ':completion:*' file-list '(( ${+NUMERIC} )) && reply=(true)'

     specifies that long format will be used any time a numeric
     argument is supplied, else short format.

file-patterns
     This is used by the standard function for completing filenames,
     _files.  If the style is unset up to three tags are offered,
     `globbed-files',`directories' and `all-files', depending on the
     types of files  expected by the caller of _files.  The first two
     (`globbed-files' and `directories') are normally offered together
     to make it easier to complete files in sub-directories.

     The file-patterns style provides alternatives to the default tags,
     which are not used.  Its value consists of elements of the form
     `PATTERN:TAG'; each string may contain any number of such
     specifications separated by spaces.

     The PATTERN is a pattern that is to be used to generate filenames.
     Any occurrence of the sequence `%p' is replaced by any pattern(s)
     passed by the function calling _files.  Colons in the pattern must
     be preceded by a backslash to make them distinguishable from the
     colon before the TAG.  If more than one pattern is needed, the
     patterns can be given inside braces, separated by commas.

     The TAGs of all strings in the value will be offered by _files and
     used when looking up other styles.  Any TAGs in the same word will
     be offered at the same time and before later words.  If no `:TAG'
     is given the `files' tag will be used.

     The TAG may also be followed by an optional second colon and a
     description, which will be used for the `%d' in the value of the
     format style (if that is set) instead of the default description
     supplied by the completion function.  If the description given
     here contains itself a `%d', that is replaced with the description
     supplied by the completion function.

     For example, to make the rm command first complete only names of
     object files and then the names of all files if there is no
     matching object file:


          zstyle ':completion:*:*:rm:*' file-patterns \
              '*.o:object-files' '%p:all-files'

     To alter the default behaviour of file completion -- offer files
     matching a pattern and directories on the first attempt, then all
     files -- to offer only matching files on the first attempt, then
     directories, and finally all files:


          zstyle ':completion:*' file-patterns \
              '%p:globbed-files' '*(-/):directories' '*:all-files'

     This works even where there is no special pattern: _files matches
     all files using the pattern `*' at the first step and stops when it
     sees this pattern.  Note also it will never try a pattern more
     than once for a single completion attempt.

     During the execution of completion functions, the EXTENDED_GLOB
     option is in effect, so the characters `#', `~' and `^' have
     special meanings in the patterns.

file-sort
     The standard filename completion function uses this style without
     a tag to determine in which order the names should be listed; menu
     completion will cycle through them in the same order.  The possible
     values are: `size' to sort by the size of the file; `links' to
     sort by the number of links to the file; `modification' (or `time'
     or `date') to sort by the last modification time; `access' to sort
     by the last access time; and `inode' (or `change') to sort by the
     last inode change time.  If the style is set to any other value,
     or is unset, files will be sorted alphabetically by name.  If the
     value contains the string `reverse', sorting is done in the
     opposite order.  If the value contains the string `follow',
     timestamps are associated with the targets of symbolic links; the
     default is to use the timestamps of the links themselves.

filter
     This is used by the LDAP plugin for e-mail address completion to
     specify the attributes to match against when filtering entries.
     So for example, if the style is set to `sn', matching is done
     against surnames.  Standard LDAP filtering is used so normal
     completion matching is bypassed.  If this style is not set, the
     LDAP plugin is skipped.  You may also need to set the command
     style to specify how to connect to your LDAP server.

force-list
     This forces a list of completions to be shown at any point where
     listing is done, even in cases where the list would usually be
     suppressed.  For example, normally the list is only shown if there
     are at least two different matches.  By setting this style to
     `always', the list will always be shown, even if there is only a
     single match that will immediately be accepted.  The style may also
     be set to a number.  In this case the list will be shown if there
     are at least that many matches, even if they would all insert the
     same string.

     This style is tested for the default tag as well as for each tag
     valid for the current completion.  Hence the listing can be forced
     only for certain types of match.

format
     If this is set for the descriptions tag, its value is used as a
     string to display above matches in completion lists.  The sequence
     `%d' in this string will be replaced with a short description of
     what these matches are.  This string may also contain the following
     sequences to specify output attributes, *note Prompt Expansion:::
     `%B', `%S', `%U', `%F', `%K' and their lower case counterparts, as
     well as `%{...%}'.  `%F', `%K' and `%{...%}' take arguments in the
     same form as prompt expansion.  Note that the %G sequence is not
     available; an argument to `%{' should be used instead.

     The style is tested with each tag valid for the current completion
     before it is tested for the descriptions tag.  Hence different
     format strings can be defined for different types of match.

     Note also that some completer functions define additional
     `%'-sequences.  These are described for the completer functions
     that make use of them.

     Some completion functions display messages that may be customised
     by setting this style for the messages tag.  Here, the `%d' is
     replaced with a message given by the completion function.

     Finally, the format string is looked up with the warnings tag, for
     use when no matches could be generated at all.  In this case the
     `%d' is replaced with the descriptions for the matches that were
     expected separated by spaces.  The sequence `%D' is replaced with
     the same descriptions separated by newlines.

     It is possible to use printf-style field width specifiers with `%d'
     and similar escape sequences.  This is handled by the zformat
     builtin command from the zsh/zutil module, see *note The zsh/zutil
     Module::.

glob
     This is used by the _expand completer.  If it is set to `true'
     (the default), globbing will be attempted on the words resulting
     from a previous substitution (see the substitute style) or else
     the original string from the line.

global
     If this is set to `true' (the default), the _expand_alias
     completer and bindable command will try to expand global aliases.

group-name
     The completion system can group different types of matches, which
     appear in separate lists.  This style can be used to give the
     names of groups for particular tags.  For example, in command
     position the completion system generates names of builtin and
     external commands, names of aliases, shell functions and
     parameters and reserved words as possible completions.  To have
     the external commands and shell functions listed separately:


          zstyle ':completion:*:*:-command-:*:commands' group-name commands
          zstyle ':completion:*:*:-command-:*:functions' group-name functions

     As a consequence, any match with the same tag will be displayed in
     the same group.

     If the name given is the empty string the name of the tag for the
     matches will be used as the name of the group.  So, to have all
     different types of matches displayed separately, one can just set:


          zstyle ':completion:*' group-name ''

     All matches for which no group name is defined will be put in a
     group named -default-.

group-order
     This style is additional to the group-name style to specify the
     order for display of the groups defined by that style (compare
     tag-order, which determines which completions appear at all).  The
     groups named are shown in the given order; any other groups are
     shown in the order defined by the completion function.

     For example, to have names of builtin commands, shell functions and
     external commands appear in that order when completing in command
     position:


          zstyle ':completion:*:*:-command-:*' group-order \
                 builtins functions commands

groups
     A list of names of UNIX groups.  If this is not set, group names
     are taken from the YP database or the file `/etc/group'.

hidden
     If this is set to true, matches for the given context will not be
     listed, although any description for the matches set with the
     format style will be shown.  If it is set to `all', not even the
     description will be displayed.

     Note that the matches will still be completed; they are just not
     shown in the list.  To avoid having matches considered as possible
     completions at all, the tag-order style can be modified as
     described below.

hosts
     A list of names of hosts that should be completed.  If this is not
     set, hostnames are taken from the file `/etc/hosts'.

hosts-ports
     This style is used by commands that need or accept hostnames and
     network ports.  The strings in the value should be of the form
     `HOST:PORT'.  Valid ports are determined by the presence of
     hostnames; multiple ports for the same host may appear.

ignore-line
     This is tested for each tag valid for the current completion.  If
     it is set to `true', none of the words that are already on the line
     will be considered as possible completions.  If it is set to
     `current', the word the cursor is on will not be considered as a
     possible completion.  The value `current-shown' is similar but only
     applies if the list of completions is currently shown on the
     screen.  Finally, if the style is set to `other', no word apart
     from the current one will be considered as a possible completion.

     The values `current' and `current-shown' are a bit like the
     opposite of the accept-exact style:  only strings with missing
     characters will be completed.

     Note that you almost certainly don't want to set this to `true' or
     `other' for a general context such as `:completion:*'.  This is
     because it would disallow completion of, for example, options
     multiple times even if the command in question accepts the option
     more than once.

ignore-parents
     The style is tested without a tag by the function completing
     pathnames in order to determine whether to ignore the names of
     directories already mentioned in the current word, or the name of
     the current working directory.  The value must include one or both
     of the following strings:


    parent
          The name of any directory whose path is already contained in
          the word on the line is ignored.  For example, when
          completing after foo/../, the directory foo will not be
          considered a valid completion.

    pwd
          The name of the current working directory will not be
          completed; hence, for example, completion after ../ will not
          use the name of the current directory.


     In addition, the value may include one or both of:


    ..
          Ignore the specified directories only when the word on the
          line contains the substring `../'.

    directory
          Ignore the specified directories only when names of
          directories are completed, not when completing names of files.


     Excluded values act in a similar fashion to values of the
     ignored-patterns style, so they can be restored to consideration by
     the _ignored completer.

extra-verbose
     If set, the completion listing is more verbose at the cost of a
     probable decrease in completion speed.  Completion performance
     will suffer if this style is set to `true'.

ignored-patterns
     A list of patterns; any trial completion matching one of the
     patterns will be excluded from consideration.  The _ignored
     completer can appear in the list of completers to restore the
     ignored matches.  This is a more configurable version of the shell
     parameter $fignore.

     Note that the EXTENDED_GLOB option is set during the execution of
     completion functions, so the characters `#', `~' and `^' have
     special meanings in the patterns.

insert
     This style is used by the _all_matches completer to decide whether
     to insert the list of all matches unconditionally instead of
     adding the list as another match.

insert-ids
     When completing process IDs, for example as arguments to the kill
     and wait builtins the name of a command may be converted to the
     appropriate process ID.  A problem arises when the process name
     typed is not unique.  By default (or if this style is set
     explicitly to `menu') the name will be converted immediately to a
     set of possible IDs, and menu completion will be started to cycle
     through them.

     If the value of the style is `single', the shell will wait until
     the user has typed enough to make the command unique before
     converting the name to an ID; attempts at completion will be
     unsuccessful until that point.  If the value is any other string,
     menu completion will be started when the string typed by the user
     is longer than the common prefix to the corresponding IDs.

insert-tab
     If this is set to `true', the completion system will insert a TAB
     character (assuming that was used to start completion) instead of
     performing completion when there is no non-blank character to the
     left of the cursor.  If it is set to `false', completion will be
     done even there.

     The value may also contain the substrings `pending' or
     `pending=VAL'.  In this case, the typed character will be inserted
     instead of staring completion when there is unprocessed input
     pending.  If a VAL is given, completion will not be done if there
     are at least that many characters of unprocessed input.  This is
     often useful when pasting characters into a terminal.  Note
     however, that it relies on the $PENDING special parameter from the
     zsh/zle module being set properly which is not guaranteed on all
     platforms.

     The default value of this style is `true' except for completion
     within vared builtin command where it is `false'.

insert-unambiguous
     This is used by the _match and _approximate completers.  These
     completers are often used with menu completion since the word typed
     may bear little resemblance to the final completion.  However, if
     this style is `true', the completer will start menu completion
     only if it could find no unambiguous initial string at least as
     long as the original string typed by the user.

     In the case of the _approximate completer, the completer field in
     the context will already have been set to one of correct-NUM or
     approximate-NUM, where NUM is the number of errors that were
     accepted.

     In the case of the _match completer, the style may also be set to
     the string `pattern'.  Then the pattern on the line is left
     unchanged if it does not match unambiguously.

keep-prefix
     This style is used by the _expand completer.  If it is `true', the
     completer will try to keep a prefix containing a tilde or parameter
     expansion.  Hence, for example, the string `~/f*' would be
     expanded to `~/foo' instead of `/home/user/foo'.  If the style is
     set to `changed' (the default), the prefix will only be left
     unchanged if there were other changes between the expanded words
     and the original word from the command line.  Any other value
     forces the prefix to be expanded unconditionally.

     The behaviour of expand when this style is true is to cause _expand
     to give up when a single expansion with the restored prefix is the
     same as the original; hence any remaining completers may be called.

last-prompt
     This is a more flexible form of the ALWAYS_LAST_PROMPT option.  If
     it is true, the completion system will try to return the cursor to
     the previous command line after displaying a completion list.  It
     is tested for all tags valid for the current completion, then the
     default tag.  The cursor will be moved back to the previous line
     if this style is `true' for all types of match.  Note that unlike
     the ALWAYS_LAST_PROMPT option this is independent of the numeric
     prefix argument.

known-hosts-files
     This style should contain a list of files to search for host names
     and (if the use-ip style is set) IP addresses in a format
     compatible with ssh known_hosts files.  If it is not set, the files
     /etc/ssh/ssh_known_hosts and ~/.ssh/known_hosts are used.

list
     This style is used by the _history_complete_word bindable command.
     If it is set to `true' it has no effect.  If it is set to `false'
     matches will not be listed.  This overrides the setting of the
     options controlling listing behaviour, in particular AUTO_LIST.
     The context always starts with `:completion:history-words'.

list-colors
     If the zsh/complist module is loaded, this style can be used to set
     color specifications.  This mechanism replaces the use of the
     ZLS_COLORS and ZLS_COLOURS parameters described in *note The
     zsh/complist Module::, but the syntax is the same.

     If this style is set for the default tag, the strings in the value
     are taken as specifications that are to be used everywhere.  If it
     is set for other tags, the specifications are used only for
     matches of the type described by the tag.  For this to work best,
     the group-name style must be set to an empty string.

     In addition to setting styles for specific tags, it is also
     possible to use group names specified explicitly by the group-name
     tag together with the `(group)' syntax allowed by the ZLS_COLORS
     and ZLS_COLOURS parameters and simply using the default tag.

     It is possible to use any color specifications already set up for
     the GNU version of the ls command:


          zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

     The default colors are the same as for the GNU ls command and can
     be obtained by setting the style to an empty string (i.e. '').

list-dirs-first
     This is used by file completion.  If set, directories to be
     completed are listed separately from and before completion for
     other files, regardless of tag ordering.  In addition, the tag
     other-files is used in place of all-files for the remaining files,
     to indicate that no directories are presented with that tag.

list-grouped
     If this style is `true' (the default), the completion system will
     try to make certain completion listings more compact by grouping
     matches.  For example, options for commands that have the same
     description (shown when the verbose style is set to `true') will
     appear as a single entry.  However, menu selection can be used to
     cycle through all the matches.

list-packed
     This is tested for each tag valid in the current context as well
     as the default tag.  If it is set to `true', the corresponding
     matches appear in listings as if the LIST_PACKED option were set.
     If it is set to `false', they are listed normally.

list-prompt
     If this style is set for the default tag, completion lists that
     don't fit on the screen can be scrolled (see *note The
     zsh/complist Module::).  The value, if not the empty string, will
     be displayed after every screenful and the shell will prompt for a
     key press; if the style is set to the empty string, a default
     prompt will be used.

     The value may contain the escape sequences: `%l' or `%L', which
     will be replaced by the number of the last line displayed and the
     total number of lines; `%m' or `%M', the number of the  last match
     shown and the total number of matches; and `%p' and `%P', `Top'
     when at the beginning of the list, `Bottom' when at the end and the
     position shown as a percentage of the total length otherwise.  In
     each case the form with the uppercase letter will be replaced by a
     string of fixed width, padded to the  right with spaces, while the
     lowercase form will be replaced by a variable width string.  As in
     other prompt strings, the escape sequences `%S', `%s', `%B', `%b',
     `%U', `%u' for entering and leaving the display modes standout,
     bold and underline, and `%F', `%f', `%K', `%k' for changing the
     foreground background colour, are also available, as is the form
     `%{...%}' for enclosing escape sequences which display with zero
     (or, with a numeric argument, some other) width.

     After deleting this prompt the variable LISTPROMPT should be unset
     for the the removal to take effect.

list-rows-first
     This style is tested in the same way as the list-packed style and
     determines whether matches are to be listed in a rows-first
     fashion as if the LIST_ROWS_FIRST option were set.

list-suffixes
     This style is used by the function that completes filenames.  If
     it is true, and completion is attempted on a string containing
     multiple partially typed pathname components, all ambiguous
     components will be shown.  Otherwise, completion stops at the
     first ambiguous component.

list-separator
     The value of this style is used in completion listing to separate
     the string to complete from a description when possible (e.g. when
     completing options).  It defaults to `--' (two hyphens).

local
     This is for use with functions that complete URLs for which the
     corresponding files are available directly from the filing system.
     Its value should consist of three strings: a hostname, the path to
     the default web pages for the server, and the directory name used
     by a user placing web pages within their home area.

     For example:


          zstyle ':completion:*' local toast \
              /var/http/public/toast public_html

     Completion after `http://toast/stuff/' will look for files in the
     directory /var/http/public/toast/stuff,  while completion after
     `http://toast/~yousir/' will look for files in the directory
     ~yousir/public_html.

mail-directory
     If set, zsh will assume that mailbox files can be found in the
     directory specified.  It defaults to `~/Mail'.

match-original
     This is used by the _match completer.  If it is set to only,
     _match will try to generate matches without inserting a `*' at the
     cursor position.  If set to any other non-empty value, it will
     first try to generate matches without inserting the `*' and if
     that yields no matches, it will try again with the `*' inserted.
     If it is unset or set to the empty string, matching will only be
     performed with the `*' inserted.

matcher
     This style is tested separately for each tag valid in the current
     context.  Its value is added to any match specifications given by
     the matcher-list style.  It should be in the form described in
     *note Completion Matching Control::.

matcher-list
     This style can be set to a list of match specifications that are to
     be applied everywhere. Match specifications are described in *note
     Completion Matching Control::.  The completion system will try
     them one after another for each completer selected.  For example,
     to try first simple completion and, if that generates no matches,
     case-insensitive completion:


          zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

     By default each specification replaces the previous one; however,
     if a specification is prefixed with +, it is added to the existing
     list.  Hence it is possible to create increasingly general
     specifications without repetition:


          zstyle ':completion:*' matcher-list '' '+m{a-Z}={A-Z}' '+m{A-Z}={a-z}'

     It is possible to create match specifications valid for particular
     completers by using the third field of the context.  For example,
     to use the completers _complete and _prefix but only allow
     case-insensitive completion with _complete:


          zstyle ':completion:*' completer _complete _prefix
          zstyle ':completion:*:complete:*' matcher-list \
                 '' 'm:{a-zA-Z}={A-Za-z}'

     User-defined names, as explained for the completer style, are
     available.  This makes it possible to try the same completer more
     than once with different match specifications each time.  For
     example, to try normal completion without a match specification,
     then normal completion with case-insensitive matching, then
     correction, and finally partial-word completion:


          zstyle ':completion:*' completer _complete _correct _complete:foo
          zstyle ':completion:*:complete:*' matcher-list \
              '' 'm:{a-zA-Z}={A-Za-z}'
          zstyle ':completion:*:foo:*' matcher-list \
              'm:{a-zA-Z}={A-Za-z} r:|[-_./]=* r:|=*'

     If the style is unset in any context no match specification is
     applied.  Note also that some completers such as _correct and
     _approximate do not use the match specifications at all, though
     these completers will only ever called once even if the
     matcher-list contains more than one element.

     Where multiple specifications are useful, note that the _entire_
     completion is done for each element of matcher-list, which can
     quickly reduce the shell's performance.  As a rough rule of thumb,
     one to three strings will give acceptable performance.  On the
     other hand, putting multiple space-separated values into the same
     string does not have an appreciable impact on performance.

     If there is no current matcher or it is empty, and the option
     NO_CASE_GLOB is in effect, the matching for files is performed
     case-insensitively in any case.  However, any matcher must
     explicitly specify case-insensitive matching if that is required.

max-errors
     This is used by the _approximate and _correct completer functions
     to determine the maximum number of errors to allow.  The completer
     will try to generate completions by first allowing one error, then
     two errors, and so on, until either a match or matches were found
     or the maximum number of errors given by this style has been
     reached.

     If the value for this style contains the string `numeric', the
     completer function will take any numeric argument as the maximum
     number of errors allowed. For example, with


          zstyle ':completion:*:approximate:::' max-errors 2 numeric

     two errors are allowed if no numeric argument is given, but with a
     numeric argument of six (as in `ESC-6 TAB'), up to six errors are
     accepted.  Hence with a value of `0 numeric', no correcting
     completion will be attempted unless a numeric argument is given.

     If the value contains the string `not-numeric', the completer will
     _not_ try to generate corrected completions when given a numeric
     argument, so in this case the number given should be greater than
     zero.  For example, `2 not-numeric' specifies that correcting
     completion with two errors will usually be performed, but if a
     numeric argument is given, correcting completion will not be
     performed.

     The default value for this style is `2 numeric'.

max-matches-width
     This style is used to determine the trade off between the width of
     the display used for matches and the width used for their
     descriptions when the verbose style is in effect.  The value gives
     the number of display columns to reserve for the matches.  The
     default is half the width of the screen.

     This has the most impact when several matches have the same
     description and so will be grouped together.  Increasing the style
     will allow more matches to be grouped together; decreasing it will
     allow more of the description to be visible.

menu
     If this is true in the context of any of the tags defined for the
     current completion menu completion will be used.  The value for a
     specific tag will take precedence over that for the `default' tag.

     If none of the values found in this way is true but at least one
     is set to `auto', the shell behaves as if the AUTO_MENU option is
     set.

     If one of the values is explicitly set to false, menu completion
     will be explicitly turned off, overriding the MENU_COMPLETE option
     and other settings.

     In the form `yes=NUM', where `yes' may be any of the true values
     (`yes', `true', `on' and `1'), menu completion will be turned on
     if there are at least NUM matches.  In the form `yes=long', menu
     completion will be turned on if the list does not fit on the
     screen.  This does not activate menu completion if the widget
     normally only lists completions, but menu completion can be
     activated in that case with the value `yes=long-list' (Typically,
     the value `select=long-list' described later is more useful as it
     provides control over scrolling.)

     Similarly, with any of the `false' values (as in `no=10'), menu
     completion will _not_ be used if there are NUM or more matches.

     The value of this widget also controls menu selection, as
     implemented by the zsh/complist module.  The following values may
     appear either alongside or instead of the values above.

     If the value contains the string `select', menu selection will be
     started unconditionally.

     In the form `select=NUM', menu selection will only be started if
     there are at least NUM matches.  If the values for more than one
     tag provide a number, the smallest number is taken.

     Menu selection can be turned off explicitly by defining a value
     containing the string`no-select'.

     It is also possible to start menu selection only if the list of
     matches does not fit on the screen by using the value
     `select=long'.  To start menu selection even if the current widget
     only performs listing, use the value `select=long-list'.

     To turn on menu completion or menu selection when a there are a
     certain number of matches _or_ the list of matches does not fit on
     the screen, both of `yes=' and `select=' may be given twice, once
     with a number and once with `long' or `long-list'.

     Finally, it is possible to activate two special modes of menu
     selection.  The word `interactive' in the value causes interactive
     mode to be entered immediately when menu selection is started; see
     *note The zsh/complist Module:: for a description of interactive
     mode.  Including the string `search' does the same for incremental
     search mode.  To select backward incremental search, include the
     string `search-backward'.

muttrc
     If set, gives the location of the mutt configuration file.  It
     defaults to `~/.muttrc'.

numbers
     This is used with the jobs tag.  If it is `true', the shell will
     complete job numbers instead of the shortest unambiguous prefix of
     the job command text.  If the value is a number, job numbers will
     only be used if that many words from the job descriptions are
     required to resolve ambiguities.  For example, if the value is
     `1', strings will only be used if all jobs differ in the first
     word on their command lines.

old-list
     This is used by the _oldlist completer.  If it is set to `always',
     then standard widgets which perform listing will retain the
     current list of matches, however they were generated; this can be
     turned off explicitly with the value `never', giving the behaviour
     without the _oldlist completer.  If the style is unset, or any
     other value, then the existing list of completions is displayed if
     it is not already; otherwise, the standard completion list is
     generated; this is the default behaviour of _oldlist.  However, if
     there is an old list and this style contains the name of the
     completer function that generated the list, then the old list will
     be used even if it was generated by a widget which does not do
     listing.

     For example, suppose you type ^Xc to use the _correct_word widget,
     which generates a list of corrections for the word under the
     cursor.  Usually, typing ^D would generate a standard list of
     completions for the word on the command line, and show that.  With
     _oldlist, it will instead show the list of corrections already
     generated.

     As another example consider the _match completer: with the
     insert-unambiguous style set to `true' it inserts only a common
     prefix string, if there is any.  However, this may remove parts of
     the original pattern, so that further completion could produce
     more matches than on the first attempt.  By using the _oldlist
     completer and setting this style to _match, the list of matches
     generated on the first attempt will be used again.

old-matches
     This is used by the _all_matches completer to decide if an old
     list of matches should be used if one exists.  This is selected by
     one of the `true' values or by the string `only'.  If the value is
     `only', _all_matches will only use an old list and won't have any
     effect on the list of matches currently being generated.

     If this style is set it is generally unwise to call the
     _all_matches completer unconditionally.  One possible use is for
     either this style or the completer style to be defined with the -e
     option to zstyle to make the style conditional.

old-menu
     This is used by the _oldlist completer.  It controls how menu
     completion behaves when a completion has already been inserted and
     the user types a standard completion key such as TAB.  The default
     behaviour of _oldlist is that menu completion always continues
     with the existing list of completions.  If this style is set to
     `false', however, a new completion is started if the old list was
     generated by a different completion command; this is the behaviour
     without the _oldlist completer.

     For example, suppose you type ^Xc to generate a list of
     corrections, and menu completion is started in one of the usual
     ways.  Usually, or with this style set to false, typing TAB at
     this point would start trying to complete the line as it now
     appears.  With _oldlist, it instead continues to cycle through the
     list of corrections.

original
     This is used by the _approximate and _correct completers to decide
     if the original string should be added as a possible completion.
     Normally, this is done only if there are at least two possible
     corrections, but if this style is set to `true', it is always
     added.  Note that the style will be examined with the completer
     field in the context name set to correct-NUM or approximate-NUM,
     where NUM is the number of errors that were accepted.

packageset
     This style is used when completing arguments of the Debian `dpkg'
     program.  It contains an override for the default package set for
     a given context.  For example,


          zstyle ':completion:*:complete:dpkg:option--status-1:*' \
                         packageset avail

     causes available packages, rather than only installed packages, to
     be completed for `dpkg --status'.

path
     The function that completes color names uses this style with the
     colors tag.  The value should be the pathname of a file containing
     color names in the format of an X11 rgb.txt file.  If the style is
     not set but this file is found in one of various standard
     locations it will be used as the default.

pine-directory
     If set, specifies the directory containing PINE mailbox files.
     There is no default, since recursively searching this directory is
     inconvenient for anyone who doesn't use PINE.

ports
     A list of Internet service names (network ports) to complete.  If
     this is not set, service names are taken from the file
     `/etc/services'.

prefix-hidden
     This is used for certain completions which share a common prefix,
     for example command options beginning with dashes.  If it is
     `true', the prefix will not be shown in the list of matches.

     The default value for this style is `false'.

prefix-needed
     This, too, is used for matches with a common prefix.  If it is set
     to `true' this common prefix must be typed by the user to generate
     the matches.  In the case of command options, this means that the
     initial `-', `+', or `--' must be typed explicitly before option
     names will be completed.

     The default value for this style is `true'.

preserve-prefix
     This style is used when completing path names.  Its value should
     be a pattern matching an initial prefix of the word to complete
     that should be left unchanged under all circumstances.  For
     example, on some Unices an initial `//' (double slash) has a
     special meaning; setting this style to the string `//' will
     preserve it.  As another example, setting this style to `?:/'
     under Cygwin would allow completion after `a:/...' and so on.

range
     This is used by the _history completer and the
     _history_complete_word bindable command to decide which words
     should be completed.

     If it is a singe number, only the last N words from the history
     will be completed.

     If it is a range of the form `MAX:SLICE', the last SLICE words
     will be completed; then if that yields no matches, the SLICE words
     before those will be tried and so on.  This process stops either
     when at least one match was been found, or MAX words have been
     tried.

     The default is to complete all words from the history at once.

regular
     This style is used by the _expand_alias completer and bindable
     command.  If set to `true' (the default), regular aliases will be
     expanded but only in command position.  If it is set to `false',
     regular aliases will never be expanded.   If it is set to `always',
     regular aliases will be expanded even if not in command position.

rehash
     If this is set when completing external commands, the internal
     list (hash) of commands will be updated for each search by issuing
     the rehash command.  There is a speed penalty for this which is
     only likely to be noticeable when directories in the path have
     slow file access.

remote-access
     If set to false, certain commands will be prevented from making
     Internet connections to retrieve remote information.  This
     includes the completion for the CVS command.

     It is not always possible to know if connections are in fact to a
     remote site, so some may be prevented unnecessarily.

remove-all-dups
     The _history_complete_word bindable command and the _history
     completer use this to decide if all duplicate matches should be
     removed, rather than just consecutive duplicates.

select-prompt
     If this is set for the default tag, its value will be displayed
     during menu selection (see the menu style above) when the
     completion list does not fit on the screen as a whole.  The same
     escapes as for the list-prompt style are understood, except that
     the numbers refer to the match or line the mark is on.  A default
     prompt is used when the value is the empty string.

select-scroll
     This style is tested for the default tag and determines how a
     completion list is scrolled during a menu selection (see the menu
     style above) when the completion list does not fit on the screen
     as a whole.  If the value is `0' (zero), the list is scrolled by
     half-screenfuls; if it is a positive integer, the list is scrolled
     by the given number of lines; if it is a negative number, the list
     is scrolled by a screenful minus the absolute value of the given
     number of lines.  The default is to scroll by single lines.

separate-sections
     This style is used with the manuals tag when completing names of
     manual pages.  If it is `true', entries for different sections are
     added separately using tag names of the form `manual.X', where X
     is the section number.  When the group-name style is also in
     effect, pages from different sections will appear separately.
     This style is also used similarly with the words style when
     completing words for the dict command. It allows words from
     different dictionary databases to be added separately.  The
     default for this style is `false'.

show-completer
     Tested whenever a new completer is tried.  If it is true, the
     completion system outputs a progress message in the listing area
     showing what completer is being tried.  The message will be
     overwritten by any output when completions are found and is
     removed after completion is finished.

single-ignored
     This is used by the _ignored completer when there is only one
     match.  If its value is `show', the single match will be displayed
     but not inserted.  If the value is `menu', then the single match
     and the original string are both added as matches and menu
     completion is started, making it easy to select either of them.

sort
     Many completion widgets call _description at some point which
     decides whether the matches are added sorted or unsorted (often
     indirectly via _wanted or _requested).  This style can be set
     explicitly to one of the usual true or false values as an override.
     If it is not set for the context, the standard behaviour of the
     calling widget is used.

     The style is tested first against the full context including the
     tag, and if that fails to produce a value against the context
     without the tag.

     If the calling widget explicitly requests unsorted matches, this
     is usually honoured.  However, the default (unsorted) behaviour of
     completion for the command history may be overridden by setting
     the style to true.

     In the _expand completer, if it is set to `true', the expansions
     generated will always be sorted.  If it is set to `menu', then the
     expansions are only sorted when they are offered as single strings
     but not in the string containing all possible expansions.

special-dirs
     Normally, the completion code will not produce the directory names
     `.' and `..' as possible completions.  If this style is set to
     `true', it will add both `.' and `..' as possible completions; if
     it is set to `..', only `..' will be added.

     The following example sets special-dirs to `..' when the current
     prefix is empty, is a single `.', or consists only of a path
     beginning with `../'.  Otherwise the value is `false'.


          zstyle -e ':completion:*' special-dirs \
             '[[ $PREFIX = (../)#(|.|..) ]] && reply=(..)'

squeeze-slashes
     If set to `true', sequences of slashes in filename paths (for
     example in `foo//bar') will be treated as a single slash.  This is
     the usual behaviour of UNIX paths.  However, by default the file
     completion function behaves as if there were a `*' between the
     slashes.

stop
     If set to `true', the _history_complete_word bindable command will
     stop once when reaching the beginning or end of the history.
     Invoking _history_complete_word will then wrap around to the
     opposite end of the history.  If this style is set to `false' (the
     default), _history_complete_word will loop immediately as in a
     menu completion.

strip-comments
     If set to `true', this style causes non-essential comment text to
     be removed from completion matches.  Currently it is only used when
     completing e-mail addresses where it removes any display name from
     the addresses, cutting them down to plain USER@HOST form.

subst-globs-only
     This is used by the _expand completer.  If it is set to `true',
     the expansion will only be used if it resulted from globbing;
     hence, if expansions resulted from the use of the substitute style
     described below, but these were not further changed by globbing,
     the expansions will be rejected.

     The default for this style is `false'.

substitute
     This boolean style controls whether the _expand completer will
     first try to expand all substitutions in the string (such as
     `$(...)' and `${...}').

     The default is `true'.

suffix
     This is used by the _expand completer if the word starts with a
     tilde or contains a parameter expansion.  If it is set to `true',
     the word will only be expanded if it doesn't have a suffix, i.e.
     if it is something like `~foo' or `$foo' rather than `~foo/' or
     `$foo/bar', unless that suffix itself contains characters eligible
     for expansion.  The default for this style is `true'.

tag-order
     This provides a mechanism for sorting how the tags available in a
     particular context will be used.

     The values for the style are sets of space-separated lists of tags.
     The tags in each value will be tried at the same time; if no match
     is found, the next value is used.  (See the file-patterns style for
     an exception to this behavior.)

     For example:


          zstyle ':completion:*:complete:-command-:*' tag-order \
              'commands functions'

     specifies that completion in command position first offers
     external commands and shell functions.  Remaining tags will be
     tried if no completions are found.

     In addition to tag names, each string in the value may take one of
     the following forms:


    -
          If any value consists of only a hyphen, then _only_ the tags
          specified in the other values are generated.  Normally all
          tags not explicitly selected are tried last if the specified
          tags fail to generate any matches.  This means that a single
          value consisting only of a single hyphen turns off completion.

    ! TAGS...
          A string starting with an exclamation mark specifies names of
          tags that are _not_ to be used.  The effect is the same as if
          all other possible tags for the context had been listed.

    TAG:LABEL ...
          Here, TAG is one of the standard tags and LABEL is an
          arbitrary name.  Matches are generated as normal but the name
          LABEL is used in contexts instead of TAG.  This is not useful
          in words starting with !.

          If the LABEL starts with a hyphen, the TAG is prepended to the
          LABEL to form the name used for lookup.  This can be used to
          make the completion system try a certain tag more than once,
          supplying different style settings for each attempt; see
          below for an example.

    TAG:LABEL:DESCRIPTION
          As before, but description will replace the `%d' in the value
          of the format style instead of the default description
          supplied by the completion function.  Spaces in the
          description must be quoted with a backslash.  A `%d' appearing
          in DESCRIPTION is replaced with the description given by the
          completion function.


     In any of the forms above the tag may be a pattern or several
     patterns in the form `{PAT1,PAT2...}'.  In this case all matching
     tags will be used except for any given explicitly in the same
     string.

     One use of these features is to try one tag more than once,
     setting other styles differently on each attempt, but still to use
     all the other tags without having to repeat them all.  For
     example, to make completion of function names in command position
     ignore all the completion functions starting with an underscore
     the first time completion is tried:


          zstyle ':completion:*:*:-command-:*' tag-order \
              'functions:-non-comp *' functions
          zstyle ':completion:*:functions-non-comp' ignored-patterns '_*'

     On the first attempt, all tags will be offered but the functions
     tag will be replaced by functions-non-comp.  The ignored-patterns
     style is set for this tag to exclude functions starting with an
     underscore.  If there are no matches, the second value of the
     tag-order style is used which completes functions using the default
     tag, this time presumably including all function names.

     The matches for one tag can be split into different groups.  For
     example:


          zstyle ':completion:*' tag-order \
              'options:-long:long\ options
               options:-short:short\ options
               options:-single-letter:single\ letter\ options'

          zstyle ':completion:*:options-long' ignored-patterns '[-+](|-|[^-]*)'
          zstyle ':completion:*:options-short' ignored-patterns '--*' '[-+]?'
          zstyle ':completion:*:options-single-letter' ignored-patterns '???*'

     With the group-names style set, options beginning with `--',
     options beginning with a single `-' or `+' but containing multiple
     characters, and single-letter options will be displayed in
     separate groups with different descriptions.

     Another use of patterns is to try multiple match specifications
     one after another.  The matcher-list style offers something
     similar, but it is tested very early in the completion system and
     hence can't be set for single commands nor for more specific
     contexts.  Here is how to try normal completion without any match
     specification and, if that generates no matches, try again with
     case-insensitive matching, restricting the effect to arguments of
     the command foo:


          zstyle ':completion:*:*:foo:*' tag-order '*' '*:-case'
          zstyle ':completion:*-case' matcher 'm:{a-z}={A-Z}'

     First, all the tags offered when completing after foo are tried
     using the normal tag name.  If that generates no matches, the
     second value of tag-order is used, which tries all tags again
     except that this time each has -case appended to its name for
     lookup of styles.  Hence this time the value for the matcher style
     from the second call to zstyle in the example is used to make
     completion case-insensitive.

     It is possible to use the -e option of the zstyle builtin command
     to specify conditions for the use of particular tags.  For example:


          zstyle -e '*:-command-:*' tag-order '
              if [[ -n $PREFIX$SUFFIX ]]; then
                reply=( )
              else
                reply=( - )
              fi'

     Completion in command position will be attempted only if the string
     typed so far is not empty.  This is tested using the PREFIX
     special parameter; see *note Completion Widgets:: for a
     description of parameters which are special inside completion
     widgets.  Setting reply to an empty array provides the default
     behaviour of trying all tags at once; setting it to an array
     containing only a hyphen disables the use of all tags and hence of
     all completions.

     If no tag-order style has been defined for a context, the strings
     `(|*-)argument-* (|*-)option-* values' and `options' plus all tags
     offered by the completion function will be used to provide a
     sensible default behavior that causes arguments (whether normal
     command arguments or arguments of options) to be completed before
     option names for most commands.

urls
     This is used together with the the urls tag by functions
     completing URLs.

     If the value consists of more than one string, or if the only
     string does not name a file or directory, the strings are used as
     the URLs to complete.

     If the value contains only one string which is the name of a normal
     file the URLs are taken from that file (where the URLs may be
     separated by white space or newlines).

     Finally, if the only string in the value names a directory, the
     directory hierarchy rooted at this directory gives the
     completions.  The top level directory should be the file access
     method, such as `http', `ftp', `bookmark' and so on.  In many
     cases the next level of directories will be a filename.  The
     directory hierarchy can descend as deep as necessary.

     For example,


          zstyle ':completion:*' urls ~/.urls
          mkdir -p ~/.urls/ftp/ftp.zsh.org/pub/development

     allows completion of all the components of the URL
     ftp://ftp.zsh.org/pub/development after suitable commands such as
     `netscape' or `lynx'.  Note, however, that access methods and
     files are completed separately, so if the hosts style is set hosts
     can be completed without reference to the urls style.

     See the description in the function _urls itself for more
     information (e.g. `more $^fpath/_urls(N)').

use-cache
     If this is set, the completion caching layer is activated for any
     completions which use it (via the _store_cache, _retrieve_cache,
     and _cache_invalid functions).  The directory containing the cache
     files can be changed with the cache-path style.

use-compctl
     If this style is set to a string _not_ equal to false, 0, no, and
     off, the completion system may use any completion specifications
     defined with the compctl builtin command.  If the style is unset,
     this is done only if the zsh/compctl module is loaded.  The string
     may also contain the substring `first' to use completions defined
     with `compctl -T', and the substring `default' to use the
     completion defined with `compctl -D'.

     Note that this is only intended to smooth the transition from
     compctl to the new completion system and may disappear in the
     future.

     Note also that the definitions from compctl will only be used if
     there is no specific completion function for the command in
     question.  For example, if there is a function _foo to complete
     arguments to the command foo, compctl will never be invoked for
     foo.  However, the compctl version will be tried if foo only uses
     default completion.

use-ip
     By default, the function _hosts that completes host names strips
     IP addresses from entries read from host databases such as NIS and
     ssh files.  If this style is true, the corresponding IP addresses
     can be completed as well.  This style is not use in any context
     where the hosts style is set; note also it must be set before the
     cache of host names is generated (typically the first completion
     attempt).

use-perl
     Various parts of the function system use awk to extract words from
     files or command output as this universally available.  However,
     many versions of awk have arbitrary limits on the size of input.
     If this style is set, perl will be used instead.  This is almost
     always preferable if perl is available on your system.

     Currently this is only used in completions for `make', but it may
     be extended depending on authorial frustration.

users
     This may be set to a list of usernames to be completed.  If it is
     not set all usernames will be completed.  Note that if it is set
     only that list of users will be completed; this is because on some
     systems querying all users can take a prohibitive amount of time.

users-hosts
     The values of this style should be of the form `USER@HOST' or
     `USER:HOST'. It is used for commands that need pairs of user- and
     hostnames.  These commands will complete usernames from this style
     (only), and will restrict subsequent hostname completion to hosts
     paired with that user in one of the values of the style.

     It is possible to group values for sets of commands which allow a
     remote login, such as rlogin and ssh, by using the my-accounts tag.
     Similarly, values for sets of commands which usually refer to the
     accounts of other people, such as talk and finger, can be grouped
     by using the other-accounts tag.  More ambivalent commands may use
     the accounts tag.

users-hosts-ports
     Like users-hosts but used for commands like telnet and containing
     strings of the form `USER@HOST:PORT'.

verbose
     If set, as it is by default, the completion listing is more
     verbose.  In particular many commands show descriptions for
     options if this style is `true'.

word
     This is used by the _list completer, which prevents the insertion
     of completions until a second completion attempt when the line has
     not changed.  The normal way of finding out if the line has
     changed is to compare its entire contents between the two
     occasions.  If this style is true, the comparison is instead
     performed only on the current word.  Hence if completion is
     performed on another word with the same contents, completion will
     not be delayed.




File: zsh.info,  Node: Control Functions,  Next: Bindable Commands,  Prev: Completion System Configuration,  Up: Completion System

20.4 Control Functions
======================



The initialization script compinit redefines all the widgets which
perform completion to call the supplied widget function _main_complete.
This function acts as a wrapper calling the so-called `completer'
functions that generate matches.  If _main_complete is called with
arguments, these are taken as the names of completer functions to be
called in the order given.  If no arguments are given, the set of
functions to try is taken from the completer style.  For example, to
use normal completion and correction if that doesn't generate any
matches:


     zstyle ':completion:*' completer _complete _correct

after calling compinit. The default value for this style is `_complete
_ignored', i.e. normally only ordinary completion is tried, first with
the effect of the ignored-patterns style and then without it.  The
_main_complete function uses the return status of the completer
functions to decide if other completers should be called.  If the return
status is zero, no other completers are tried and the _main_complete
function returns.

If the first argument to _main_complete is a single hyphen, the
arguments will not be taken as names of completers.  Instead, the
second argument gives a name to use in the COMPLETER field of the
context and the other arguments give a command name and arguments to
call to generate the matches.

The following completer functions are contained in the distribution,
although users may write their own.  Note that in contexts the leading
underscore is stripped, for example basic completion is performed in the
context `:completion::complete:...'.


_all_matches
     This completer can be used to add a string consisting of all other
     matches.  As it influences later completers it must appear as the
     first completer in the list.  The list of all matches is affected
     by the avoid-completer and old-matches styles described above.

     It may be useful to use the _generic function described below to
     bind _all_matches to its own keystroke, for example:


          zle -C all-matches complete-word _generic
          bindkey '^Xa' all-matches
          zstyle ':completion:all-matches:*' old-matches only
          zstyle ':completion:all-matches::::' completer _all_matches

     Note that this does not generate completions by itself:  first use
     any of the standard ways of generating a list of completions, then
     use ^Xa to show all matches.  It is possible instead to add a
     standard completer to the list and request that the list of all
     matches should be directly inserted:


          zstyle ':completion:all-matches::::' completer _all_matches _complete
          zstyle ':completion:all-matches:*' insert true

     In this case the old-matches style should not be set.

_approximate
     This is similar to the basic _complete completer but allows the
     completions to undergo corrections.  The maximum number of errors
     can be specified by the max-errors style; see the description of
     approximate matching in *note Filename Generation:: for how errors
     are counted.  Normally this completer will only be tried after the
     normal _complete completer:


          zstyle ':completion:*' completer _complete _approximate

     This will give correcting completion if and only if normal
     completion yields no possible completions.  When corrected
     completions are found, the completer will normally start menu
     completion allowing you to cycle through these strings.

     This completer uses the tags corrections and original when
     generating the possible corrections and the original string.  The
     format style for the former may contain the additional sequences
     `%e' and `%o' which will be replaced by the number of errors
     accepted to generate the corrections and the original string,
     respectively.

     The completer progressively increases the number of errors allowed
     up to the limit by the max-errors style, hence if a completion is
     found with one error, no completions with two errors will be
     shown, and so on.  It modifies the completer name in the context
     to indicate the number of errors being tried: on the first try the
     completer field contains `approximate-1', on the second try
     `approximate-2', and so on.

     When _approximate is called from another function, the number of
     errors to accept may be passed with the -a option.  The argument
     is in the same format as the max-errors style, all in one string.

     Note that this completer (and the _correct completer mentioned
     below) can be quite expensive to call, especially when a large
     number of errors are allowed.  One way to avoid this is to set up
     the completer style using the -e option to zstyle so that some
     completers are only used when completion is attempted a second
     time on the same string, e.g.:


          zstyle -e ':completion:*' completer '
            if [[ $_last_try != "$HISTNO$BUFFER$CURSOR" ]]; then
              _last_try="$HISTNO$BUFFER$CURSOR"
              reply=(_complete _match _prefix)
            else
              reply=(_ignored _correct _approximate)
            fi'

     This uses the HISTNO parameter and the BUFFER and CURSOR special
     parameters that are available inside zle and completion widgets to
     find out if the command line hasn't changed since the last time
     completion was tried.  Only then are the _ignored, _correct and
     _approximate completers called.

_complete
     This completer generates all possible completions in a
     context-sensitive manner, i.e. using the settings defined with the
     compdef function explained above and the current settings of all
     special parameters.  This gives the normal completion behaviour.

     To complete arguments of commands, _complete uses the utility
     function _normal, which is in turn responsible for finding the
     particular function; it is described below.  Various contexts of
     the form -CONTEXT- are handled specifically. These are all
     mentioned above as possible arguments to the #compdef tag.

     Before trying to find a function for a specific context, _complete
     checks if the parameter `compcontext' is set. Setting
     `compcontext' allows the usual completion dispatching to be
     overridden which is useful in places such as a function that uses
     vared for input. If it is set to an array, the elements are taken
     to be the possible matches which will be completed using the tag
     `values' and the description `value'. If it is set to an
     associative array, the keys are used as the possible completions
     and the values (if non-empty) are used as descriptions for the
     matches.  If `compcontext' is set to a string containing colons,
     it should be of the form `TAG:DESCR:ACTION'.  In this case the TAG
     and DESCR give the tag and description to use and the ACTION
     indicates what should be completed in one of the forms accepted by
     the _arguments utility function described below.

     Finally, if `compcontext' is set to a string without colons, the
     value is taken as the name of the context to use and the function
     defined for that context will be called.  For this purpose, there
     is a special context named -command-line- that completes whole
     command lines (commands and their arguments).  This is not used by
     the completion system itself but is nonetheless handled when
     explicitly called.

_correct
     Generate corrections, but not completions, for the current word;
     this is similar to _approximate but will not allow any number of
     extra characters at the cursor as that completer does.  The effect
     is similar to spell-checking.  It is based on _approximate, but the
     completer field in the context name is correct.

     For example, with:


          zstyle ':completion:::::' completer _complete _correct _approximate
          zstyle ':completion:*:correct:::' max-errors 2 not-numeric
          zstyle ':completion:*:approximate:::' max-errors 3 numeric

     correction will accept up to two errors.  If a numeric argument is
     given, correction will not be performed, but correcting completion
     will be, and will accept as many errors as given by the numeric
     argument.  Without a numeric argument, first correction and then
     correcting completion will be tried, with the first one accepting
     two errors and the second one accepting three errors.

     When _correct is called as a function, the number of errors to
     accept may be given following the -a option.  The argument is in
     the same form a values to the accept style, all in one string.

     This completer function is intended to be used without the
     _approximate completer or, as in the example, just before it.
     Using it after the _approximate completer is useless since
     _approximate will at least generate the corrected strings
     generated by the _correct completer -- and probably more.

_expand
     This completer function does not really perform completion, but
     instead checks if the word on the command line is eligible for
     expansion and, if it is, gives detailed control over how this
     expansion is done.  For this to happen, the completion system
     needs to be invoked with complete-word, not expand-or-complete
     (the default binding for TAB), as otherwise the string will be
     expanded by the shell's internal mechanism before the completion
     system is started.  Note also this completer should be called
     before the _complete completer function.

     The tags used when generating expansions are all-expansions for the
     string containing all possible expansions, expansions when adding
     the possible expansions as single matches and original when adding
     the original string from the line.  The order in which these
     strings are generated, if at all, can be controlled by the
     group-order and tag-order styles, as usual.

     The format string for all-expansions and for expansions may
     contain the sequence `%o' which will be replaced by the original
     string from the line.

     The kind of expansion to be tried is controlled by the substitute,
     glob and subst-globs-only styles.

     It is also possible to call _expand as a function, in which case
     the different modes may be selected with options: -s for
     substitute, -g for glob and -o for subst-globs-only.

_expand_alias
     If the word the cursor is on is an alias, it is expanded and no
     other completers are called.  The types of aliases which are to be
     expanded can be controlled with the styles regular, global and
     disabled.

     This function is also a bindable command, see *note Bindable
     Commands::.

_history
     Complete words from the shell's command  history.  This completer
     can be controlled by the remove-all-dups, and sort styles as for
     the _history_complete_word bindable command, see *note Bindable
     Commands:: and *note Completion System Configuration::.

_ignored
     The ignored-patterns style can be set to a list of patterns which
     are compared against possible completions; matching ones are
     removed.  With this completer those matches can be reinstated, as
     if no ignored-patterns style were set.  The completer actually
     generates its own list of matches; which completers are invoked is
     determined in the same way as for the _prefix completer.  The
     single-ignored style is also available as described above.

_list
     This completer allows the insertion of matches to be delayed until
     completion is attempted a second time without the word on the line
     being changed.  On the first attempt, only the list of matches
     will be shown.  It is affected by the styles condition and word,
     see *note Completion System Configuration::.

_match
     This completer is intended to be used after the _complete
     completer.  It behaves similarly but the string on the command
     line may be a pattern to match against trial completions.  This
     gives the effect of the GLOB_COMPLETE option.

     Normally completion will be performed by taking the pattern from
     the line, inserting a `*' at the cursor position and comparing the
     resulting pattern with the possible completions generated.  This
     can be modified with the match-original style described above.

     The generated matches will be offered in a menu completion unless
     the insert-unambiguous style is set to `true'; see the description
     above for other options for this style.

     Note that matcher specifications defined globally or used by the
     completion functions (the styles matcher-list and matcher) will
     not be used.

_menu
     This completer was written as simple example function to show how
     menu completion can be enabled in shell code. However, it has the
     notable effect of disabling menu selection which can be useful with
     _generic based widgets. It should be used as the first completer in
     the list.  Note that this is independent of the setting of the
     MENU_COMPLETE option and does not work with the other menu
     completion widgets such as reverse-menu-complete, or
     accept-and-menu-complete.

_oldlist
     This completer controls how the standard completion widgets behave
     when there is an existing list of completions which may have been
     generated by a special completion (i.e. a separately-bound
     completion command).  It allows the ordinary completion keys to
     continue to use the list of completions thus generated, instead of
     producing a new list of ordinary contextual completions.  It
     should appear in the list of completers before any of the widgets
     which generate matches.  It uses two styles: old-list and
     old-menu, see *note Completion System Configuration::.

_prefix
     This completer can be used to try completion with the suffix
     (everything after the cursor) ignored.  In other words, the suffix
     will not be considered to be part of the word to complete.  The
     effect is similar to the expand-or-complete-prefix command.

     The completer style is used to decide which other completers are to
     be called to generate matches.  If this style is unset, the list of
     completers set for the current context is used -- except, of
     course, the _prefix completer itself.  Furthermore, if this
     completer appears more than once in the list of completers only
     those completers not already tried by the last invocation of
     _prefix will be called.

     For example, consider this global completer style:


          zstyle ':completion:*' completer \
              _complete _prefix _correct _prefix:foo

     Here, the _prefix completer tries normal completion but ignoring
     the suffix.  If that doesn't generate any matches, and neither does
     the call to the _correct completer after it, _prefix will be
     called a second time and, now only trying correction with the
     suffix ignored.  On the second invocation the completer part of the
     context appears as `foo'.

     To use _prefix as the last resort and try only normal completion
     when it is invoked:


          zstyle ':completion:*' completer _complete ... _prefix
          zstyle ':completion::prefix:*' completer _complete

     The add-space style is also respected.  If it is set to `true' then
     _prefix will insert a space between the matches generated (if any)
     and the suffix.

     Note that this completer is only useful if the COMPLETE_IN_WORD
     option is set; otherwise, the cursor will be moved to the end of
     the current word before the completion code is called and hence
     there will be no suffix.

bashcompinit
     This function provides compatibility with bash's programmable
     completion system.  When run it will define the functions, compgen
     and complete which correspond to the bash builtins with the same
     names.  It will then be possible to use completion specifications
     and functions written for bash.




File: zsh.info,  Node: Bindable Commands,  Next: Completion Functions,  Prev: Control Functions,  Up: Completion System

20.5 Bindable Commands
======================



In addition to the context-dependent completions provided, which are
expected to work in an intuitively obvious way, there are a few widgets
implementing special behaviour which can be bound separately to keys.
The following is a list of these and their default bindings.


_bash_completions
     This function is used by two widgets, _bash_complete-word and
     _bash_list-choices.  It exists to provide compatibility with
     completion bindings in bash.  The last character of the binding
     determines what is completed: `!', command names; `$', environment
     variables; `@', host names; `/', file names; `~' user names.  In
     bash, the binding preceded by `\e' gives completion, and preceded
     by `^X' lists options.  As some of these bindings clash with
     standard zsh bindings, only `\e~' and `^X~' are bound by default.
     To add the rest, the following should be added to .zshrc after
     compinit has been run:


          for key in '!' '$' '@' '/' '~'; do
            bindkey "\e$key" _bash_complete-word
            bindkey "^X$key" _bash_list-choices
          done

     This includes the bindings for `~' in case they were already bound
     to something else; the completion code does not override user
     bindings.

_correct_filename (^XC)
     Correct the filename path at the cursor position.  Allows up to
     six errors in the name.  Can also be called with an argument to
     correct a filename path, independently of zle; the correction is
     printed on standard output.

_correct_word (^Xc)
     Performs correction of the current argument using the usual
     contextual completions as possible choices. This stores the string
     `correct-word' in the FUNCTION field of the context name and then
     calls the _correct completer.

_expand_alias (^Xa)
     This function can be used as a completer and as a bindable command.
     It expands the word the cursor is on if it is an alias.  The types
     of alias expanded can be controlled with the styles regular, global
     and disabled.

     When used as a bindable command there is one additional feature
     that can be selected by setting the complete style to `true'.  In
     this case, if the word is not the name of an alias, _expand_alias
     tries to complete the word to a full alias name without expanding
     it.  It leaves the cursor directly after the completed word so
     that invoking _expand_alias once more will expand the now-complete
     alias name.

_expand_word (^Xe)
     Performs expansion on the current word:  equivalent to the standard
     expand-word command, but using the _expand completer.  Before
     calling it, the FUNCTION field of the context is set to
     `expand-word'.

_generic
     This function is not defined as a widget and not bound by default.
     However, it can be used to define a widget and will then store the
     name of the widget in the FUNCTION field of the context and call
     the completion system.  This allows custom completion widgets with
     their own set of style settings to be defined easily.  For example,
     to define a widget that performs normal completion and starts menu
     selection:


          zle -C foo complete-word _generic
          bindkey '...' foo
          zstyle ':completion:foo:*' menu yes select=1

     Note in particular that the completer style may be set for the
     context in order to change the set of functions used to generate
     possible matches.  If _generic is called with arguments, those are
     passed through to _main_complete as the list of completers in
     place of those defined by the completer style.

_history_complete_word (\e/)
     Complete words from the shell's command history. This uses the
     list, remove-all-dups, sort, and stop styles.

_most_recent_file (^Xm)
     Complete the name of the most recently modified file matching the
     pattern on the command line (which may be blank).  If given a
     numeric argument N, complete the Nth most recently modified file.
     Note the completion, if any, is always unique.

_next_tags (^Xn)
     This command alters the set of matches used to that for the next
     tag, or set of tags, either as given by the tag-order style or as
     set by default; these matches would otherwise not be available.
     Successive invocations of the command cycle through all possible
     sets of tags.

_read_comp (^X^R)
     Prompt the user for a string, and use that to perform completion
     on the current word.  There are two possibilities for the string.
     First, it can be a set of words beginning `_', for example `_files
     -/', in which case the function with any arguments will be called
     to generate the completions.  Unambiguous parts of the function
     name will be completed automatically (normal completion is not
     available at this point) until a space is typed.

     Second, any other string will be passed as a set of arguments to
     compadd and should hence be an expression specifying what should
     be completed.

     A very restricted set of editing commands is available when
     reading the string:  `DEL' and `^H' delete the last character;
     `^U' deletes the line, and `^C' and `^G' abort the function, while
     `RET' accepts the completion.  Note the string is used verbatim as
     a command line, so arguments must be quoted in accordance with
     standard shell rules.

     Once a string has been read, the next call to _read_comp will use
     the existing string instead of reading a new one.  To force a new
     string to be read, call _read_comp with a numeric argument.

_complete_debug (^X?)
     This widget performs ordinary completion, but captures in a
     temporary file a trace of the shell commands executed by the
     completion system.  Each completion attempt gets its own file.  A
     command to view each of these files is pushed onto the editor
     buffer stack.

_complete_help (^Xh)
     This widget displays information about the context names, the
     tags, and the completion functions used when completing at the
     current cursor position. If given a numeric argument other than 1
     (as in `ESC-2 ^Xh'), then the styles used and the contexts for
     which they are used will be shown, too.

     Note that the information about styles may be incomplete; it
     depends on the information available from the completion functions
     called, which in turn is determined by the user's own styles and
     other settings.

_complete_help_generic
     Unlike other commands listed here, this must be created as a
     normal ZLE widget rather than a completion widget (i.e. with zle
     -N).  It is used for generating help with a widget bound to the
     _generic widget that is described above.

     If this widget is created using the name of the function, as it is
     by default, then when executed it will read a key sequence.  This
     is expected to be bound to a call to a completion function that
     uses the _generic widget.  That widget will be executed, and
     information provided in the same format that the _complete_help
     widget displays for contextual completion.

     If the widget's name contains debug, for example if it is created
     as `zle -N _complete_debug_generic _complete_help_generic', it
     will read and execute the keystring for a generic widget as before,
     but then generate debugging information as done by _complete_debug
     for contextual completion.

     If the widget's name contains noread, it will not read a keystring
     but instead arrange that the next use of a generic widget run in
     the same shell will have the effect as described above.

     The widget works by setting the shell parameter
     ZSH_TRACE_GENERIC_WIDGET which is read by _generic.  Unsetting the
     parameter cancels any pending effect of the noread form.

     For example, after executing the following:


          zle -N _complete_debug_generic _complete_help_generic
          bindkey '^x:' _complete_debug_generic

     typing `C-x :' followed by the key sequence for a generic widget
     will cause trace output for that widget to be saved to a file.

_complete_tag (^Xt)
     This widget completes symbol tags created by the etags or ctags
     programmes (note there is no connection with the completion
     system's tags) stored in a file TAGS, in the format used by etags,
     or tags, in the format created by ctags.  It will look back up the
     path hierarchy for the first occurrence of either file; if both
     exist, the file TAGS is preferred.  You can specify the full path
     to a TAGS or tags file by setting the parameter $TAGSFILE or
     $tagsfile respectively.  The corresponding completion tags used
     are etags and vtags, after emacs and vi respectively.




File: zsh.info,  Node: Completion Functions,  Next: Completion Directories,  Prev: Bindable Commands,  Up: Completion System

20.6 Utility Functions
======================



Descriptions follow for utility functions that may be useful when
writing completion functions.  If functions are installed in
subdirectories, most of these reside in the Base subdirectory.  Like
the example functions for commands in the distribution, the utility
functions generating matches all follow the convention of returning
status zero if they generated completions and non-zero if no matching
completions could be added.

Two more features are offered by the _main_complete function.  The
arrays compprefuncs and comppostfuncs may contain names of functions
that are to be called immediately before or after completion has been
tried.  A function will only be called once unless it explicitly
reinserts itself into the array.


_all_labels [ -x ] [ -12VJ ] TAG NAME DESCR [ COMMAND ARGS ... ]
     This is a convenient interface to the _next_label function below,
     implementing the loop shown in the _next_label example.  The
     COMMAND and its arguments are called to generate the matches.  The
     options stored in the parameter NAME will automatically be inserted
     into the ARGS passed to the COMMAND.  Normally, they are put
     directly after the COMMAND, but if one of the ARGS is a single
     hyphen, they are inserted directly before that.  If the hyphen is
     the last argument, it will be removed from the argument list
     before the COMMAND is called.  This allows _all_labels to be used
     in almost all cases where the matches can be generated by a single
     call to the compadd builtin command or by a call to one of the
     utility functions.

     For example:


          local expl
          ...
          if _requested foo; then
            ...
            _all_labels foo expl '...' compadd ... - $matches
          fi

     Will complete the strings from the matches parameter, using
     compadd with additional options which will take precedence over
     those generated by _all_labels.

_alternative [ -C NAME ] SPEC ...
     This function is useful in simple cases where multiple tags are
     available.  Essentially it implements a loop like the one
     described for the _tags function below.

     The tags to use and the action to perform if a tag is requested are
     described using the SPECs which are of the form:
     `TAG:DESCR:ACTION'.  The TAGs are offered using _tags and if the
     tag is requested, the ACTION is executed with the given
     description DESCR.  The ACTIONs are those accepted by the
     _arguments function (described below), excluding the `->STATE' and
     `=...' forms.

     For example, the ACTION may be a simple function call:


          _alternative \
              'users:user:_users' \
              'hosts:host:_hosts'

     offers usernames and hostnames as possible matches, generated by
     the _users and _hosts functions respectively.

     Like _arguments, this functions uses _all_labels to execute the
     actions, which will loop over all sets of tags.  Special handling
     is only required if there is an additional valid tag, for example
     inside a function called from _alternative.

     Like _tags this function supports the -C option to give a
     different name for the argument context field.

_arguments [ -nswWACRS ] [ -O NAME ] [ -M MATCHSPEC ] [ : ] SPEC ...
     This function can be used to give a complete specification for
     completion for a command whose arguments follow standard UNIX
     option and argument conventions.  The following forms specify
     individual sets of options and arguments; to avoid ambiguity,
     these may be separated from the options to _arguments itself by a
     single colon.  Options to _arguments itself must be in separate
     words, i.e. -s -w, not -sw.

     With the option -n, _arguments sets the parameter NORMARG to the
     position of the first normal argument in the $words array, i.e.
     the position after the end of the options.  If that argument has
     not been reached, NORMARG is set to -1.  The caller should declare
     `integer NORMARG' if the -n option is passed; otherwise the
     parameter is not used.


    N:MESSAGE:ACTION
    N::MESSAGE:ACTION
          This describes the N'th normal argument.  The MESSAGE will be
          printed above the matches generated and the ACTION indicates
          what can be completed in this position (see below).  If there
          are two colons before the MESSAGE the argument is optional.
          If the MESSAGE contains only white space, nothing will be
          printed above the matches unless the action adds an
          explanation string itself.

    :MESSAGE:ACTION
    ::MESSAGE:ACTION
          Similar, but describes the _next_ argument, whatever number
          that happens to be.  If all arguments are specified in this
          form in the correct order the numbers are unnecessary.

    *:MESSAGE:ACTION
    *::MESSAGE:ACTION
    *:::MESSAGE:ACTION
          This describes how arguments (usually non-option arguments,
          those not beginning with - or +) are to be completed when
          neither of the first two forms was provided.  Any number of
          arguments can be completed in this fashion.

          With two colons before the MESSAGE, the words special array
          and the CURRENT special parameter are modified to refer only
          to the normal arguments when the ACTION is executed or
          evaluated.  With three colons before the MESSAGE they are
          modified to refer only to the normal arguments covered by
          this description.

    OPTSPEC
    OPTSPEC:...
          This describes an option.  The colon indicates handling for
          one or more arguments to the option; if it is not present,
          the option is assumed to take no arguments.

          By default, options are multi-character name, one `-WORD' per
          option.  With -s, options may be single characters, with more
          than one option per word, although words starting with two
          hyphens, such as `--prefix', are still considered complete
          option names.  This is suitable for standard GNU options.

          The combination of -s with -w allows single-letter options to
          be combined in a single word even if one or more of the
          options take arguments.  For example, if -a takes an
          argument, with no -s `-ab' is considered as a single
          (unhandled) option; with -s -ab is an option with the
          argument `b'; with both -s and -w, -ab may be the option -a
          and the option -b with arguments still to come.

          The option -W takes this a stage further:  it is possible to
          complete single-letter options even after an argument that
          occurs in the same word.  However, it depends on the action
          performed whether options will really be completed at this
          point.  For more control, use a utility function like _guard
          as part of the action.

          The following forms are available for the initial OPTSPEC,
          whether or not the option has arguments.


         *OPTSPEC
               Here OPTSPEC is one of the remaining forms below.  This
               indicates the following OPTSPEC may be repeated.
               Otherwise if the corresponding option is already present
               on the command line to the left of the cursor it will
               not be offered again.

         -OPTNAME
         +OPTNAME
               In the simplest form the OPTSPEC is just the option name
               beginning with a minus or a plus sign, such as `-foo'.
               The first argument for the option (if any) must follow
               as a _separate_ word directly after the option.

               Either of `-+OPTNAME' and `+-OPTNAME' can be used to
               specify that -OPTNAME and +OPTNAME are both valid.

               In all the remaining forms, the leading `-' may be
               replaced by or paired with `+' in this way.

         -OPTNAME-
               The first argument of the option must come directly
               after the option name _in the same word_.  For example,
               `-foo-:...' specifies that the completed option and
               argument will look like `-fooARG'.

         -OPTNAME+
               The first argument may appear immediately after OPTNAME
               in the same word, or may appear as a separate word after
               the option.  For example, `-foo+:...' specifies that the
               completed option and argument will look like either
               `-fooARG' or `-foo ARG'.

         -OPTNAME=
               The argument may appear as the next word, or in same
               word as the option name provided that it is separated
               from it by an equals sign, for example `-foo=ARG' or
               `-foo ARG'.

         -OPTNAME=-
               The argument to the option must appear after an equals
               sign in the same word, and may not be given in the next
               argument.

         OPTSPEC[EXPLANATION]
               An explanation string may be appended to any of the
               preceding forms of OPTSPEC by enclosing it in brackets,
               as in `-q[query operation]'.

               The verbose style is used to decide whether the
               explanation strings are displayed with the option in a
               completion listing.

               If no bracketed explanation string is given but the
               auto-description style is set and only one argument is
               described for this OPTSPEC, the value of the style is
               displayed, with any appearance of the sequence `%d' in
               it replaced by the MESSAGE of the first OPTARG that
               follows the OPTSPEC; see below.


          It is possible for options with a literal `+' or `=' to
          appear, but that character must be quoted, for example `-\+'.

          Each OPTARG following an OPTSPEC must take one of the
          following forms:


         :MESSAGE:ACTION
         ::MESSAGE:ACTION
               An argument to the option; MESSAGE and ACTION are
               treated as for ordinary arguments.  In the first form,
               the argument is mandatory, and in the second form it is
               optional.

               This group may be repeated for options which take
               multiple arguments.  In other words,
               :MESSAGE1:ACTION1:MESSAGE2:ACTION2 specifies that the
               option takes two arguments.

         :*PATTERN:MESSAGE:ACTION
         :*PATTERN::MESSAGE:ACTION
         :*PATTERN:::MESSAGE:ACTION
               This describes multiple arguments.  Only the last OPTARG
               for an option taking multiple arguments may be given in
               this form.  If the PATTERN is empty (i.e., :*:), all the
               remaining words on the line are to be completed as
               described by the ACTION; otherwise, all the words up to
               and including a word matching the PATTERN are to be
               completed using the ACTION.

               Multiple colons are treated as for the `*:...' forms for
               ordinary arguments:  when the MESSAGE is preceded by two
               colons, the words special array and the CURRENT special
               parameter are modified during the execution or
               evaluation of the ACTION to refer only to the words
               after the option.  When preceded by three colons, they
               are modified to refer only to the words covered by this
               description.



     Any literal colon in an OPTNAME, MESSAGE, or ACTION must be
     preceded by a backslash, `\:'.

     Each of the forms above may be preceded by a list in parentheses
     of option names and argument numbers.  If the given option is on
     the command line, the options and arguments indicated in
     parentheses will not be offered.  For example, `(-two -three
     1)-one:...' completes the option `-one'; if this appears on the
     command line, the options -two and -three and the first ordinary
     argument will not be completed after it.  `(-foo):...' specifies
     an ordinary argument completion; -foo will not be completed if
     that argument is already present.

     Other items may appear in the list of excluded options to indicate
     various other items that should not be applied when the current
     specification is matched: a single star (*) for the rest arguments
     (i.e. a specification of the form `*:...'); a colon (:) for all
     normal (non-option-) arguments; and a hyphen (-) for all options.
     For example, if `(*)' appears before an option and the option
     appears on the command line, the list of remaining arguments
     (those shown in the above table beginning with `*:') will not be
     completed.

     To aid in reuse of specifications, it is possible to precede any
     of the forms above with `!'; then the form will no longer be
     completed, although if the option or argument appears on the
     command line they will be skipped as normal.  The main use for
     this is when the arguments are given by an array, and _arguments
     is called repeatedly for more specific contexts: on the first call
     `_arguments $global_options' is used, and on subsequent calls
     `_arguments !$^global_options'.

     In each of the forms above the ACTION determines how completions
     should be generated.  Except for the `->STRING' form below, the
     ACTION will be executed by calling the _all_labels function to
     process all tag labels.  No special handling of tags is needed
     unless a function call introduces a new one.

     The forms for ACTION are as follows.


      (single unquoted space)
          This is useful where an argument is required but it is not
          possible or desirable to generate matches for it.  The
          MESSAGE will be displayed but no completions listed.  Note
          that even in this case the colon at the end of the MESSAGE is
          needed; it may only be omitted when neither a MESSAGE nor an
          ACTION is given.

    (ITEM1 ITEM2 ...)
          One of a list of possible matches, for example:


               :foo:(foo bar baz)

    ((ITEM1\:DESC1 ...))
          Similar to the above, but with descriptions for each possible
          match.  Note the backslash before the colon.  For example,


               :foo:((a\:bar b\:baz))

          The matches will be listed together with their descriptions
          if the description style is set with the values tag in the
          context.

    ->STRING
          In this form, _arguments processes the arguments and options
          and then returns control to the calling function with
          parameters set to indicate the state of processing; the
          calling function then makes its own arrangements for
          generating completions.  For example, functions that
          implement a state machine can use this type of action.

          Where _arguments encounters a `->STRING', it will strip all
          leading and trailing whitespace from STRING and set the array
          state to the set of all STRINGSs for which an action is to be
          performed.

          By default and in common with all other well behaved
          completion functions, _arguments returns status zero if it
          was able to add matches and non-zero otherwise. However, if
          the -R option is given, _arguments will instead return a
          status of 300 to indicate that $state is to be handled.

          In addition to $state, _arguments also sets the global
          parameters `context', `line' and `opt_args' as described
          below, and does not reset any changes made to the special
          parameters such as PREFIX and words.  This gives the calling
          function the choice of resetting these parameters or
          propagating changes in them.

          A function calling _arguments with at least one action
          containing a `->STRING' therefore must declare appropriate
          local parameters:


               local context state line
               typeset -A opt_args

          to avoid _arguments from altering the global environment.

    {EVAL-STRING}
          A string in braces is evaluated as shell code to generate
          matches.  If the EVAL-STRING itself does not begin with an
          opening parenthesis or brace it is split into separate words
          before execution.

    = ACTION
          If the ACTION starts with `= ' (an equals sign followed by a
          space), _arguments will insert the contents of the ARGUMENT
          field of the current context as the new first element in the
          words special array and increment the value of the CURRENT
          special parameter.  This has the effect of inserting a dummy
          word onto the completion command line while not changing the
          point at which completion is taking place.

          This is most useful with one of the specifiers that restrict
          the words on the command line on which the ACTION is to
          operate (the two- and three-colon forms above).  One
          particular use is when an ACTION itself causes _arguments on
          a restricted range; it is necessary to use this trick to
          insert an appropriate command name into the range for the
          second call to _arguments to be able to parse the line.

    WORD...
    WORD...
          This covers all forms other than those above.  If the ACTION
          starts with a space, the remaining list of words will be
          invoked unchanged.

          Otherwise it will be invoked with some extra strings placed
          after the first word; these are to be passed down as options
          to the compadd builtin.  They ensure that the state specified
          by _arguments, in particular the descriptions of options and
          arguments, is correctly passed to the completion command.
          These additional arguments are taken from the array parameter
          `expl'; this will be set up before executing the ACTION and
          hence may be referred to inside it, typically in an expansion
          of the form `$expl[@]' which preserves empty elements of the
          array.


     During the performance of the action the array `line' will be set
     to the command name and normal arguments from the command line,
     i.e. the words from the command line excluding all options and
     their arguments.  Options are stored in the associative array
     `opt_args' with option names as keys and their arguments as the
     values.  For options that have more than one argument these are
     given as one string, separated by colons.  All colons in the
     original arguments are preceded with backslashes.

     The parameter `context' is set when returning to the calling
     function to perform an action of the form `->STRING'.  It is set
     to an array of elements corresponding to the elements of $state.
     Each element is a suitable name for the argument field of the
     context: either a string of the form `option-OPT-N' for the N'th
     argument of the option -OPT, or a string of the form `argument-N'
     for the N'th argument.  For `rest' arguments, that is those in the
     list at the end not handled by position, N is the string `rest'.
     For example, when completing the argument of the -o option, the
     name is `option-o-1', while for the second normal (non-option-)
     argument it is `argument-2'.

     Furthermore, during the evaluation of the ACTION the context name
     in the curcontext parameter is altered to append the same string
     that is stored in the context parameter.

     It is possible to specify multiple sets of options and arguments
     with the sets separated by single hyphens.  The specifications
     before the first hyphen (if any) are shared by all the remaining
     sets.  The first word in every other set provides a name for the
     set which may appear in exclusion lists in specifications, either
     alone or before one of the possible values described above.  In
     the second case a `-' should appear between this name and the
     remainder.

     For example:


          _arguments \
              -a \
            - set1 \
              -c \
            - set2 \
              -d \
              ':arg:(x2 y2)'

     This defines two sets.  When the command line contains the option
     `-c', the `-d' option and the argument will not be considered
     possible completions.  When it contains `-d' or an argument, the
     option `-c' will not be considered.  However, after `-a' both sets
     will still be considered valid.

     If the name given for one of the mutually exclusive sets is of the
     form `(NAME)' then only one value from each set will ever be
     completed; more formally, all specifications are mutually
     exclusive to all other specifications in the same set.  This is
     useful for defining multiple sets of options which are mutually
     exclusive and in which the options are aliases for each other.  For
     example:


          _arguments \
              -a -b \
            - '(compress)' \
              {-c,--compress}'[compress]' \
            - '(uncompress)' \
              {-d,--decompress}'[decompress]'

     As the completion code has to parse the command line separately
     for each set this form of argument is slow and should only be used
     when necessary.  A useful alternative is often an option
     specification with rest-arguments (as in `-foo:*:...'); here the
     option -foo swallows up all remaining arguments as described by
     the OPTARG definitions.

     The options -S and -A are available to simplify the specifications
     for commands with standard option parsing.  With -S, no option
     will be completed after a `--' appearing on its own on the line;
     this argument will otherwise be ignored; hence in the line


          foobar -a -- -b

     the `-a' is considered an option but the `-b' is considered an
     argument, while the `--' is considered to be neither.

     With -A, no options will be completed after the first non-option
     argument on the line.  The -A must be followed by a pattern
     matching all strings which are not to be taken as arguments.  For
     example, to make _arguments stop completing options after the
     first normal argument, but ignoring all strings starting with a
     hyphen even if they are not described by one of the OPTSPECs, the
     form is `-A "-*"'.

     The option `-O NAME' specifies the name of an array whose elements
     will be passed as arguments to functions called to execute ACTIONS.
     For example, this can be used to pass the same set of options for
     the compadd builtin to all ACTIONs.

     The option `-M SPEC' sets a match specification to use to
     completion option names and values.  It must appear before the
     first argument specification.  The default is `r:|[_-]=* r:|=*':
     this allows partial word completion after `_' and `-', for example
     `-f-b' can be completed to `-foo-bar'.

     The option -C tells _arguments to modify the curcontext parameter
     for an action of the form `->STATE'.  This is the standard
     parameter used to keep track of the current context.  Here it (and
     not the context array) should be made local to the calling function
     to avoid passing back the modified value and should be initialised
     to the current value at the start of the function:


          local curcontext="$curcontext"

     This is useful where it is not possible for multiple states to be
     valid together.

     The option `--' allows _arguments to work out the names of long
     options that support the `--help' option which is standard in many
     GNU commands.  The command word is called with the argument
     `--help' and the output examined for option names.  Clearly, it can
     be dangerous to pass this to commands which may not support this
     option as the behaviour of the command is unspecified.

     In addition to options, `_arguments --' will try to deduce the
     types of arguments available for options when the form `--OPT=VAL'
     is valid.  It is also possible to provide hints by examining the
     help text of the command and adding specifiers of the form
     `PATTERN:MESSAGE:ACTION'; note that normal _arguments specifiers
     are not used.  The PATTERN is matched against the help text for an
     option, and if it matches the MESSAGE and ACTION are used as for
     other argument specifiers.  For example:


          _arguments -- '*\*:toggle:(yes no)' \
                        '*=FILE*:file:_files' \
                        '*=DIR*:directory:_files -/' \
                        '*=PATH*:directory:_files -/'

     Here, `yes' and `no' will be completed as the argument of options
     whose description ends in a star; file names will be completed for
     options that contain the substring `=FILE' in the description; and
     directories will be completed for options whose description
     contains `=DIR' or `=PATH'.  The last three are in fact the
     default and so need not be given explicitly, although it is
     possible to override the use of these patterns.  A typical help
     text which uses this feature is:


            -C, --directory=DIR          change to directory DIR

     so that the above specifications will cause directories to be
     completed after `--directory', though not after `-C'.

     Note also that _arguments tries to find out automatically if the
     argument for an option is optional.  This can be specified
     explicitly by doubling the colon before the MESSAGE.

     If the PATTERN ends in `(-)', this will removed from the pattern
     and the ACTION will be used only directly after the `=', not in
     the next word.  This is the behaviour of a normal specification
     defined with the form `=-'.

     The `_arguments --' can be followed by the option `-i PATTERNS' to
     give patterns for options which are not to be completed.  The
     patterns can be given as the name of an array parameter or as a
     literal list in parentheses.  For example,


          _arguments -- -i \
              "(--(en|dis)able-FEATURE*)"

     will cause completion to ignore the options `--enable-FEATURE' and
     `--disable-FEATURE' (this example is useful with GNU configure).

     The `_arguments --' form can also be followed by the option `-s
     PAIR' to describe option aliases.  Each PAIR consists of a pattern
     and a replacement.  For example, some configure-scripts describe
     options only as `--enable-foo', but also accept `--disable-foo'.
     To allow completion of the second form:


          _arguments -- -s "(#--enable- --disable-)"

     Here is a more general example of the use of _arguments:


          _arguments '-l+:left border:' \
                     '-format:paper size:(letter A4)' \
                     '*-copy:output file:_files::resolution:(300 600)' \
                     ':postscript file:_files -g \*.\(ps\|eps\)' \
                     '*:page number:'

     This describes three options: `-l', `-format', and `-copy'.  The
     first takes one argument described as `LEFT BORDER' for which no
     completion will be offered because of the empty action.  Its
     argument may come directly after the `-l' or it may be given as
     the next word on the line.

     The `-format' option takes one argument in the next word,
     described as `PAPER SIZE' for which only the strings `letter' and
     `A4' will be completed.

     The `-copy' option may appear more than once on the command line
     and takes two arguments.  The first is mandatory and will be
     completed as a filename.  The second is optional (because of the
     second colon before the description `RESOLUTION') and will be
     completed from the strings `300' and `600'.

     The last two descriptions say what should be completed as
     arguments.  The first describes the first argument as a
     `POSTSCRIPT FILE' and makes files ending in `ps' or `eps' be
     completed.  The last description gives all other arguments the
     description `PAGE NUMBERS' but does not offer completions.

_cache_invalid CACHE_IDENTIFIER
     This function returns status zero if the completions cache
     corresponding to the given cache identifier needs rebuilding.  It
     determines this by looking up the cache-policy style for the
     current context.  This should provide a function name which is run
     with the full path to the relevant cache file as the only argument.

     Example:


          _example_caching_policy () {
              # rebuild if cache is more than a week old
              local -a oldp
              oldp=( "$1"(Nmw+1) )
              (( $#oldp ))
          }

_call_function RETURN NAME [ ARGS ... ]
     If a function NAME exists, it is called with the arguments ARGS.
     The RETURN argument gives the name of a parameter in which the
     return status from the function NAME; if RETURN is empty or a
     single hyphen it is ignored.

     The return status of _call_function itself is zero if the function
     NAME exists and was called and non-zero otherwise.

_call_program TAG STRING ...
     This function provides a mechanism for the user to override the
     use of an external command.  It looks up the command style with
     the supplied TAG.  If the style is set, its value is used as the
     command to execute.  The STRINGs from the call to _call_program,
     or from the style if set, are concatenated with spaces between
     them and the resulting string is evaluated.  The return status is
     the return status of the command called.

_combination [ -s PATTERN ] TAG STYLE SPEC ... FIELD OPTS ...
     This function is used to complete combinations of values,  for
     example pairs of hostnames and usernames.  The STYLE argument
     gives the style which defines the pairs; it is looked up in a
     context with the TAG specified.

     The style name consists of field names separated by hyphens, for
     example `users-hosts-ports'.  For each field for a value is
     already known, a SPEC of the form `FIELD=PATTERN' is given.  For
     example, if the command line so far specifies a user `pws', the
     argument `users=pws' should appear.

     The next argument with no equals sign is taken as the name of the
     field for which completions should be generated (presumably not
     one of the FIELDs for which the value is known).

     The matches generated will be taken from the value of the style.
     These should contain the possible values for the combinations in
     the appropriate order (users, hosts, ports in the example above).
     The different fields the values for the different fields are
     separated by colons.  This can be altered with the option -s to
     _combination which specifies a pattern.  Typically this is a
     character class, as for example `-s "[:@]"' in the case of the
     users-hosts style.    Each `FIELD=PATTERN' specification restricts
     the completions which apply to elements of the style with
     appropriately matching fields.

     If no style with the given name is defined for the given tag, or
     if none of the strings in style's value match, but a function name
     of the required field preceded by an underscore is defined, that
     function will be called to generate the matches.  For example, if
     there is no `users-hosts-ports' or no matching hostname when a
     host is required, the function `_hosts' will automatically be
     called.

     If the same name is used for more than one field, in both the
     `FIELD=PATTERN' and the argument that gives the name of the field
     to be completed, the number of the field (starting with one) may
     be given after the fieldname, separated from it by a colon.

     All arguments after the required field name are passed to compadd
     when generating matches from the style value, or to the functions
     for the fields if they are called.

_describe [ -oO | -t TAG ] DESCR NAME1 [ NAME2 ] OPTS ... -- ...
     This function associates completions with descriptions.  Multiple
     groups separated by -- can be supplied, potentially with different
     completion options OPTS.

     The DESCR is taken as a string to display above the matches if the
     format style for the descriptions tag is set.  This is followed by
     one or two names of arrays followed by options to pass to compadd.
     The first array contains the possible completions with their
     descriptions in the form `COMPLETION:DESCRIPTION'.  If a second
     array is given, it should have the same number of elements as the
     first; in this case the corresponding elements are added as
     possible completions instead of the COMPLETION strings from the
     first array.  The completion list will retain the descriptions
     from the first array.  Finally, a set of completion options can
     appear.

     If the option `-o' appears before the first argument, the matches
     added will be treated as names of command options (N.B. not shell
     options), typically following a `-', `--' or `+' on the command
     line.  In this case _describe uses the prefix-hidden,
     prefix-needed and verbose styles to find out if the strings should
     be added as completions and if the descriptions should be shown.
     Without the `-o' option, only the verbose style is used to decide
     how descriptions are shown.  If `-O' is used instead of `-O',
     command options are completed as above but _describe will not
     handle the prefix-needed style.

     With the -t option a TAG can be specified.  The default is
     `values' or, if the -o option is given, `options'.

     If selected by the list-grouped style, strings with the same
     description will appear together in the list.

     _describe uses the _all_labels function to generate the matches, so
     it does not need to appear inside a loop over tag labels.

_description [ -x ] [ -12VJ ] TAG NAME DESCR [ SPEC ... ]
     This function is not to be confused with the previous one; it is
     used as a helper function for creating options to compadd.  It is
     buried inside many of the higher level completion functions and so
     often does not need to be called directly.

     The styles listed below are tested in the current context using the
     given TAG.  The resulting options for compadd are put into the
     array named NAME (this is traditionally `expl', but this
     convention is not enforced).  The description for the
     corresponding set of matches is passed to the function in DESCR.

     The styles tested are: format, hidden, matcher, ignored-patterns
     and group-name.  The format style is first tested for the given
     TAG and then for the descriptions tag if no value was found, while
     the remainder are only tested for the tag given as the first
     argument.  The function also calls _setup which tests some more
     styles.

     The string returned by the format style (if any) will be modified
     so that the sequence `%d' is replaced by the DESCR given as the
     third argument without any leading or trailing white space.  If,
     after removing the white space, the DESCR is the empty string, the
     format style will not be used and the options put into the NAME
     array will not contain an explanation string to be displayed above
     the matches.

     If _description is called with more than three arguments, the
     additional SPECs should be of the form `CHAR:STR'.  These supply
     escape sequence replacements for the format style: every
     appearance of `%CHAR' will be replaced by STRING.

     If the -x option is given, the description will be passed to
     compadd using the -x option instead of the default -X.  This means
     that the description will be displayed even if there are no
     corresponding matches.

     The options placed in the array NAME take account of the
     group-name style, so matches are placed in a separate group where
     necessary.  The group normally has its elements sorted (by passing
     the option -J to compadd), but if an option starting with `-V',
     `-J', `-1', or `-2' is passed to _description, that option will be
     included in the array.  Hence it is possible for the completion
     group to be unsorted by giving the option `-V', `-1V', or `-2V'.

     In most cases, the function will be used like this:


          local expl
          _description files expl file
          compadd "$expl[@]" - "$files[@]"

     Note the use of the parameter expl, the hyphen, and the list of
     matches.  Almost all calls to compadd within the completion system
     use a similar format; this ensures that user-specified styles are
     correctly passed down to the builtins which implement the
     internals of completion.

_dispatch CONTEXT STRING ...
     This sets the current context to CONTEXT and looks for completion
     functions to handle this context by hunting through the list of
     command names or special contexts (as described above for compdef)
     given as STRING ....  The first completion function to be defined
     for one of the contexts in the list is used to generate matches.
     Typically, the last STRING is -default- to cause the function for
     default completion to be used as a fallback.

     The function sets the parameter $service to the STRING being
     tried, and sets the CONTEXT/COMMAND field (the fourth) of the
     $curcontext parameter to the CONTEXT given as the first argument.

_files
     The function _files calls _path_files with all the arguments it
     was passed except for -g and -/.  The use of these two options
     depends on the setting of the  file-patterns style.

     This function accepts the full set of options allowed by
     _path_files, described below.

_gnu_generic
     This function is a simple wrapper around the _arguments function
     described above.  It can be used to determine automatically the
     long options understood by commands that produce a list when
     passed the option `--help'.  It is intended to be used as a
     top-level completion function in its own right.  For example, to
     enable option completion for the commands foo and bar, use


          compdef _gnu_generic foo bar

     after the call to compinit.

     The completion system as supplied is conservative in its use of
     this function, since it is important to be sure the command
     understands the option `--help'.

_guard [ OPTIONS ] PATTERN DESCR
     This function is intended to be used in the ACTION for the
     specifications passed to _arguments and similar functions.  It
     returns immediately with a non-zero return status if the string to
     be completed does not match the PATTERN.  If the pattern matches,
     the DESCR is displayed; the function then returns status zero if
     the word to complete is not empty, non-zero otherwise.

     The PATTERN may be preceded by any of the options understood by
     compadd that are passed down from _description, namely -M, -J, -V,
     -1, -2, -n, -F and -X.  All of these options will be ignored.
     This fits in conveniently with the argument-passing conventions of
     actions for _arguments.

     As an example, consider a command taking the options -n and -none,
     where -n must be followed by a numeric value in the same word.  By
     using:


          _arguments '-n-: :_guard "[0-9]#" "numeric value"' '-none'

     _arguments can be made to both display the message `numeric value'
     and complete options after `-n<TAB>'.  If the `-n' is already
     followed by one or more digits (the pattern passed to _guard) only
     the message will be displayed; if the `-n' is followed by another
     character, only options are completed.

_message [ -r12 ] [ -VJ GROUP ] DESCR
_message -e [ TAG ] DESCR
     The DESCR is used in the same way as the third argument to the
     _description function, except that the resulting string will
     always be shown whether or not matches were generated.  This is
     useful for displaying a help message in places where no
     completions can be generated.

     The format style is examined with the messages tag to find a
     message; the usual tag, descriptions, is used only if the style is
     not set with the former.

     If the -r option is given, no style is used; the DESCR is taken
     literally as the string to display.  This is most useful when the
     DESCR comes from a pre-processed argument list which already
     contains an expanded description.

     The -12VJ options and the GROUP are passed to compadd and hence
     determine the group the message string is added to.

     The second form gives a description for completions with the tag
     TAG to be shown even if there are no matches for that tag.  The tag
     can be omitted and if so the tag is taken from the parameter
     $curtag; this is maintained by the completion system and so is
     usually correct.

_multi_parts SEP ARRAY
     The argument SEP is a separator character.  The ARRAY may be
     either the name of an array parameter or a literal array in the
     form `(foo bar)', a parenthesised list of words separated by
     whitespace.  The possible completions are the strings from the
     array.  However, each chunk delimited by SEP will be completed
     separately.  For example, the _tar function uses `_multi_parts /
     PATHARRAY' to complete partial file paths from the given array of
     complete file paths.

     The -i option causes _multi_parts to insert a unique match even if
     that requires multiple separators to be inserted.  This is not
     usually the expected behaviour with filenames, but certain other
     types of completion, for example those with a fixed set of
     possibilities, may be more suited to this form.

     Like other utility functions, this function accepts the `-V',
     `-J', `-1', `-2', `-n', `-f', `-X', `-M', `-P', `-S', `-r', `-R',
     and `-q' options and passes them to the compadd builtin.

_next_label [ -x ] [ -12VJ ] TAG NAME DESCR [ OPTIONS ... ]
     This function is used to implement the loop over different tag
     labels for a particular tag as described above for the tag-order
     style.  On each call it checks to see if there are any more tag
     labels; if there is it returns status zero, otherwise non-zero.
     As this function requires a current tag to be set, it must always
     follow a call to _tags or _requested.

     The -x12VJ options and the first three arguments are passed to the
     _description function.  Where appropriate the TAG will be replaced
     by a tag label in this call.  Any description given in the
     tag-order style is preferred to the DESCR passed to _next_label.

     The OPTIONS given after the DESCR are set in the parameter given
     by NAME, and hence are to be passed to compadd or whatever
     function is called to add the matches.

     Here is a typical use of this function for the tag foo.  The call
     to _requested determines if tag foo is required at all; the loop
     over _next_label handles any labels defined for the tag in the
     tag-order style.


          local expl ret=1
          ...
          if _requested foo; then
            ...
            while _next_label foo expl '...'; do
              compadd "$expl[@]" ... && ret=0
            done
            ...
          fi
          return ret

_normal
     This is the standard function called to handle completion outside
     any special -CONTEXT-.  It is called both to complete the command
     word and also the arguments for a command.  In the second case,
     _normal looks for a special completion for that command, and if
     there is none it uses the completion for the -default- context.

     A second use is to reexamine the command line specified by the
     $words array and the $CURRENT parameter after those have been
     modified.  For example, the function _precommand, which completes
     after pre-command specifiers such as nohup, removes the first word
     from the words array, decrements the CURRENT parameter, then calls
     _normal again.  The effect is that `nohup CMD ...'  is treated in
     the same way as `CMD ...'.

     If the command name matches one of the patterns given by one of the
     options -p or -P to compdef, the corresponding completion function
     is called and then the parameter _compskip is checked.  If it is
     set completion is terminated at that point even if no matches have
     been found.  This is the same effect as in the -first- context.

_options
     This can be used to complete the names of shell options.  It
     provides a matcher specification that ignores a leading `no',
     ignores underscores and allows upper-case letters to match their
     lower-case counterparts (for example, `glob', `noglob', `NO_GLOB'
     are all completed).  Any arguments are propagated to the compadd
     builtin.

_options_set and _options_unset
     These functions complete only set or unset options, with the same
     matching specification used in the _options function.

     Note that you need to uncomment a few lines in the _main_complete
     function for these functions to work properly.  The lines in
     question are used to store the option settings in effect before
     the completion widget locally sets the options it needs.  Hence
     these functions are not generally used by the completion system.

_parameters
     This is used to complete the names of shell parameters.

     The option `-g PATTERN' limits the completion to parameters whose
     type matches the PATTERN.  The type of a parameter is that shown
     by `print ${(t)PARAM}', hence judicious use of `*' in PATTERN is
     probably necessary.

     All other arguments are passed to the compadd builtin.

_path_files
     This function is used throughout the completion system to complete
     filenames.  It allows completion of partial paths.  For example,
     the string `/u/i/s/sig' may be completed to
     `/usr/include/sys/signal.h'.

     The options accepted by both _path_files and _files are:


    -f
          Complete all filenames.  This is the default.

    -/
          Specifies that only directories should be completed.

    -g PATTERN
          Specifies that only files matching the PATTERN should be
          completed.

    -W PATHS
          Specifies path prefixes that are to be prepended to the
          string from the command line to generate the filenames but
          that should not be inserted as completions nor shown in
          completion listings.  Here, PATHS may be the name of an array
          parameter, a literal list of paths enclosed in parentheses or
          an absolute pathname.

    -F IGNORED-FILES
          This behaves as for the corresponding option to the compadd
          builtin.  It gives direct control over which filenames should
          be ignored.  If the option is not present, the
          ignored-patterns style is used.


     Both _path_files and _files also accept the following options
     which are passed to compadd: `-J', `-V', `-1', `-2', `-n', `-X',
     `-M', `-P', `-S', `-q', `-r', and `-R'.

     Finally, the _path_files function  uses the styles expand,
     ambiguous, special-dirs, list-suffixes and file-sort described
     above.

_pick_variant [ -c COMMAND ] [ -r NAME ] LABEL=PATTERN ... LABEL [ ARGS ... ]
     This function is used to resolve situations where a single command
     name requires more than one type of handling, either because it
     has more than one variant or because there is a name clash between
     two different commands.

     The command to run is taken from the first element of the array
     words unless this is overridden by the option -c.  This command is
     run and its output is compared with a series of patterns.
     Arguments to be passed to the command can be specified at the end
     after all the other arguments.  The patterns to try in order are
     given by the arguments LABEL=PATTERN; if the output of `COMMAND
     ARGS ...' contains PATTERN, then label is selected as the label
     for the command variant.  If none of the patterns match, the final
     command label is selected and status 1 is returned.

     If the `-r NAME' is given, the LABEL picked is stored in the
     parameter named NAME.

     The results are also cached in the _CMD_VARIANT associative array
     indexed by the name of the command run.

_regex_arguments NAME SPEC ...
     This function generates a completion function NAME which matches
     the specifications SPEC ..., a set of regular expressions as
     described below.  After running _regex_arguments, the function
     NAME should be called as a normal completion function.  The
     pattern to be matched is given by the contents of the words array
     up to the current cursor position joined together with null
     characters; no quotation is applied.

     The arguments are grouped as sets of alternatives separated by `|',
     which are tried one after the other until one matches.  Each
     alternative consists of a one or more specifications which are
     tried left to right, with each pattern matched being stripped in
     turn from the command line being tested, until all of the group
     succeeds or until one fails; in the latter case, the next
     alternative is tried.  This structure can be repeated to arbitrary
     depth by using parentheses; matching proceeds from inside to
     outside.

     A special procedure is applied if no test succeeds but the
     remaining command line string contains no null character (implying
     the remaining word is the one for which completions are to be
     generated).  The completion target is restricted to the remaining
     word and any ACTIONs for the corresponding patterns are executed.
     In this case, nothing is stripped from the command line string.
     The order of evaluation of the ACTIONs can be determined by the
     tag-order style; the various formats supported by _alternative can
     be used in ACTION.  The DESCR is used for setting up the array
     parameter expl.

     Specification arguments take one of following forms, in which
     metacharacters such as `(', `)', `#' and `|' should be quoted.


    /PATTERN/ [%LOOKAHEAD%] [-GUARD] [:TAG:DESCR:ACTION]
          This is a single primitive component.  The function tests
          whether the combined pattern `(#b)((#B)PATTERN)LOOKAHEAD*'
          matches the command line string.  If so, `GUARD' is evaluated
          and its return status is examined to determine if the test
          has succeeded.  The PATTERN string `[]' is guaranteed never
          to match.  The LOOKAHEAD is not stripped from the command
          line before the next pattern is examined.

          The argument starting with : is used in the same manner as an
          argument to _alternative.

          A component is used as follows: PATTERN is tested to see if
          the component already exists on the command line.  If it
          does, any following specifications are examined to find
          something to complete.  If a component is reached but no such
          pattern exists yet on the command line, the string containing
          the ACTION is used to generate matches to insert at that
          point.

    /PATTERN/+ [%LOOKAHEAD%] [-GUARD] [:TAG:DESCR:ACTION]
          This is similar to `/PATTERN/ ...' but the left part of the
          command line string (i.e. the part already matched by
          previous patterns) is also considered part of the completion
          target.

    /PATTERN/- [%LOOKAHEAD%] [-GUARD] [:TAG:DESCR:ACTION]
          This is similar to `/PATTERN/ ...' but the ACTIONs of the
          current and previously matched patterns are ignored even if
          the following `PATTERN' matches the empty string.

    ( SPEC )
          Parentheses may be used to groups SPECs; note each parenthesis
          is a single argument to _regex_arguments.

    SPEC #
          This allows any number of repetitions of SPEC.

    SPEC SPEC
          The two SPECs are to be matched one after the other as
          described above.

    SPEC | SPEC
          Either of the two SPECs can be matched.


     The function _regex_words can be used as a helper function to
     generate matches for a set of alternative words possibly with
     their own arguments as a command line argument.

     Examples:


          _regex_arguments _tst /$'[^\0]#\0'/ \
          /$'[^\0]#\0'/ :'compadd aaa'

     This generates a function _tst that completes aaa as its only
     argument.  The TAG and DESCRIPTION for the action have been
     omitted for brevity (this works but is not recommended in normal
     use).  The first component matches the command word, which is
     arbitrary; the second matches  any argument.  As the argument is
     also arbitrary, any following component would not depend on aaa
     being present.


          _regex_arguments _tst /$'[^\0]#\0'/ \
          /$'aaa\0'/ :'compadd aaa'

     This is a more typical use; it is similar, but any following
     patterns would only match if aaa was present as the first argument.


          _regex_arguments _tst /$'[^\0]#\0'/ \( \
          /$'aaa\0'/ :'compadd aaa' \
          /$'bbb\0'/ :'compadd bbb' \) \#

     In this example, an indefinite number of command arguments may be
     completed.  Odd arguments are completed as aaa and even arguments
     as bbb.  Completion fails unless the set of aaa and bbb arguments
     before the current one is matched correctly.


          _regex_arguments _tst /$'[^\0]#\0'/ \
          \( /$'aaa\0'/ :'compadd aaa' \| \
          /$'bbb\0'/ :'compadd bbb' \) \#

     This is similar, but either aaa or bbb may be completed for any
     argument.  In this case _regex_words could be used to generate a
     suitable expression for the arguments.

     

_regex_words TAG DESCRIPTION SPEC ...
     This function can be used to generate arguments for the
     _regex_arguments command which may be inserted at any point where
     a set of rules is expected.  The TAG and DESCRIPTION give a
     standard tag and description pertaining to the current context.
     Each SPEC contains two or three arguments separated by a colon:
     note that there is no leading colon in this case.

     Each SPEC gives one of a set of words that may be completed at
     this point, together with arguments.  It is thus roughly
     equivalent to the _arguments function when used in normal
     (non-regex) completion.

     The part of the SPEC before the first colon is the word to be
     completed.  This may contain a *; the entire word, before and after
     the * is completed, but only the text before the * is required for
     the context to be matched, so that further arguments may be
     completed after the abbreviated form.

     The second part of SPEC is a description for the word being
     completed.

     The optional third part of the SPEC describes how words following
     the one being completed are themselves to be completed.  It will be
     evaluated in order to avoid problems with quoting.  This means that
     typically it contains a reference to an array containing previously
     generated regex arguments.

     The option -t TERM specifies a terminator for the word instead of
     the usual space.  This is handled as an auto-removable suffix in
     the manner of the option -s SEP to _values.

     The result of the processing by _regex_words is placed in the array
     reply, which should be made local to the calling function.  If the
     set of words and arguments may be matched repeatedly, a # should
     be appended to the generated array at that point.

     For example:


          local -a reply
          _regex_words mydb-commands 'mydb commands' \
            'add:add an entry to mydb:$mydb_add_cmds' \
            'show:show entries in mydb'
          _regex_arguments _mydb "$reply[@]"
          _mydb "$@"

     This shows a completion function for a command mydb which takes
     two command arguments, add and show.  show takes no arguments,
     while the arguments for add have already been prepared in an array
     mydb_add_cmds, quite possibly by a previous call to _regex_words.

_requested [ -x ] [ -12VJ ] TAG [ NAME DESCR [ COMMAND ARGS ... ] ]
     This function is called to decide whether a tag already registered
     by a call to _tags (see below) has been requested by the user and
     hence completion should be performed for it.  It returns status
     zero if the tag is requested and non-zero otherwise.  The function
     is typically used as part of a loop over different tags as follows:


          _tags foo bar baz
          while _tags; do
            if _requested foo; then
              ... # perform completion for foo
            fi
            ... # test the tags bar and baz in the same way
            ... # exit loop if matches were generated
          done

     Note that the test for whether matches were generated is not
     performed until the end of the _tags loop.  This is so that the
     user can set the tag-order style to specify a set of tags to be
     completed at the same time.

     If NAME and DESCR are given, _requested calls the _description
     function with these arguments together with the options passed to
     _requested.

     If COMMAND is given, the _all_labels function will be called
     immediately with the same arguments.  In simple cases this makes it
     possible to perform the test for the tag and the matching in one
     go.  For example:


          local expl ret=1
          _tags foo bar baz
          while _tags; do
            _requested foo expl 'description' \
                compadd foobar foobaz && ret=0
            ...
            (( ret )) || break
          done

     If the COMMAND is not compadd, it must nevertheless be prepared to
     handle the same options.

_retrieve_cache CACHE_IDENTIFIER
     This function retrieves completion information from the file given
     by CACHE_IDENTIFIER, stored in a directory specified by the
     cache-path style which defaults to ~/.zcompcache.  The return
     status is zero if retrieval was successful.  It will only attempt
     retrieval if the use-cache style is set, so you can call this
     function without worrying about whether the user wanted to use the
     caching layer.

     See _store_cache below for more details.

_sep_parts
     This function is passed alternating arrays and separators as
     arguments.  The arrays specify completions for parts of strings to
     be separated by the separators.  The arrays may be the names of
     array parameters or a quoted list of words in parentheses.  For
     example, with the array `hosts=(ftp news)' the call `_sep_parts
     '(foo bar)' @ hosts' will complete the string  `f' to `foo' and
     the string `b@n' to `bar@news'.

     This function accepts the compadd options `-V', `-J', `-1', `-2',
     `-n', `-X', `-M', `-P', `-S', `-r', `-R', and `-q' and passes them
     on to the compadd builtin used to add the matches.

_setup TAG [ GROUP ]
     This function sets up the special parameters used by the
     completion system appropriately for the TAG given as the first
     argument.  It uses the styles list-colors, list-packed,
     list-rows-first, last-prompt, accept-exact, menu and force-list.

     The optional GROUP supplies the name of the group in which the
     matches will be placed.  If it is not given, the TAG is used as
     the group name.

     This function is called automatically from _description and hence
     is not normally called explicitly.

_store_cache CACHE_IDENTIFIER PARAMS ...
     This function, together with _retrieve_cache and _cache_invalid,
     implements a caching layer which can be used in any completion
     function.  Data obtained by costly operations are stored in
     parameters; this function then dumps the values of those
     parameters to a file.  The data can then be retrieved quickly from
     that file via _retrieve_cache, even in different instances of the
     shell.

     The CACHE_IDENTIFIER specifies the file which the data should be
     dumped to.  The file is stored in a directory specified by the
     cache-path style which defaults to ~/.zcompcache.  The remaining
     PARAMS arguments are the parameters to dump to the file.

     The return status is zero if storage was successful.  The function
     will only attempt storage if the use-cache style is set, so you can
     call this function without worrying about whether the user wanted
     to use the caching layer.

     The completion function may avoid calling _retrieve_cache when it
     already has the completion data available as parameters.  However,
     in that case it should call _cache_invalid to check whether the
     data in the parameters and in the cache are still valid.

     See the _perl_modules completion function for a simple example of
     the usage of the caching layer.

_tags [ [ -C NAME ] TAGS ... ]
     If called with arguments, these are taken to be the names of tags
     valid for completions in the current context.  These tags are
     stored internally and sorted by using the tag-order style.

     Next, _tags is called repeatedly without arguments from the same
     completion function.  This successively selects the first, second,
     etc. set of tags requested by the user.  The return status is zero
     if at least one of the tags is requested and non-zero otherwise.
     To test if a particular tag is to be tried, the _requested
     function should be called (see above).

     If `-C NAME' is given, NAME is temporarily stored in the argument
     field (the fifth) of the context in the curcontext parameter
     during the call to _tags; the field is restored on exit.  This
     allows _tags to use a more specific context without having to
     change and reset the curcontext parameter (which has the same
     effect).

_values [ -O NAME ] [ -s SEP ] [ -S SEP ] [ -wC ] DESC SPEC ...
     This is used to complete arbitrary keywords (values) and their
     arguments, or lists of such combinations.

     If the first argument is the option `-O NAME', it will be used in
     the same way as by the _arguments function.  In other words, the
     elements of the NAME array will be passed to compadd when
     executing an action.

     If the first argument (or the first argument after `-O NAME') is
     `-s', the next argument is used as the character that separates
     multiple values.  This character is automatically added after each
     value in an auto-removable fashion (see below); all values
     completed by `_values -s' appear in the same word on the command
     line, unlike completion using _arguments.  If this option is not
     present, only a single value will be completed per word.

     Normally, _values will only use the current word to determine
     which values are already present on the command line and hence are
     not to be completed again.  If the -w option is given, other
     arguments are examined as well.

     The first non-option argument is used as a string to print as a
     description before listing the values.

     All other arguments describe the possible values and their
     arguments in the same format used for the description of options by
     the _arguments function (see above).  The only differences are that
     no minus or plus sign is required at the beginning, values can
     have only one argument, and the forms of action beginning with an
     equal sign are not supported.

     The character separating a value from its argument can be set
     using the option -S (like -s, followed by the character to use as
     the separator in the next argument).  By default the equals sign
     will be used as the separator between values and arguments.

     Example:


          _values -s , 'description' \
                  '*foo[bar]' \
                  '(two)*one[number]:first count:' \
                  'two[another number]::second count:(1 2 3)'

     This describes three possible values: `foo', `one', and `two'.
     The first is described as `bar', takes no argument and may appear
     more than once.  The second is described as `number', may appear
     more than once, and takes one mandatory argument described as
     `first count'; no action is specified, so it will not be
     completed.  The `(two)' at the beginning says that if the value
     `one' is on the line, the value `two' will no longer be considered
     a possible completion.  Finally, the last value (`two') is
     described as `another number' and takes an optional argument
     described as `second count' for which the completions (to appear
     after an `=') are `1', `2', and `3'.  The _values function will
     complete lists of these values separated by commas.

     Like _arguments, this function temporarily adds another context
     name component to the arguments element (the fifth) of the current
     context while executing the ACTION.  Here this name is just the
     name of the value for which the argument is completed.

     The style verbose is used to decide if the descriptions for the
     values (but not those for the arguments) should be printed.

     The associative array val_args is used to report values and their
     arguments; this works similarly to the opt_args associative array
     used by _arguments.  Hence the function calling _values should
     declare the local parameters state, line, context and val_args:


          local context state line
          typeset -A val_args

     when using an action of the form `->STRING'.  With this function
     the context parameter will be set to the name of the value whose
     argument is to be completed.

     Note also that _values normally adds the character used as the
     separator between values as an auto-removable suffix (similar to a
     `/' after a directory).  However, this is not possible for a
     `->STRING' action as the matches for the argument are generated by
     the calling function.  To get the usual behaviour, the the calling
     function can add the separator X as a suffix by passing the
     options `-qS X' either directly or indirectly to compadd.

     The option -C is treated in the same way as it is by _arguments.
     In that case the parameter curcontext should be made local instead
     of context (as described above).

_wanted [ -x ] [ -C NAME ]  [ -12VJ ] TAG NAME DESCR COMMAND ARGS ...
     In many contexts, completion can only generate one particular set
     of matches, usually corresponding to a single tag.  However, it is
     still necessary to decide whether the user requires matches of
     this type.  This function is useful in such a case.

     The arguments to _wanted are the same as those to _requested, i.e.
     arguments to be passed to _description.  However, in this case the
     COMMAND is not optional;  all the processing of tags, including
     the loop over both tags and tag labels and the generation of
     matches, is carried out automatically by _wanted.

     Hence to offer only one tag and immediately add the corresponding
     matches with the given description:


          local expl
          _wanted tag expl 'description' \
              compadd matches...

     Note that, as for _requested, the COMMAND must be able to accept
     options to be passed down to compadd.

     Like _tags this function supports the -C option to give a
     different name for the argument context field.  The -x option has
     the same meaning as for _description.




File: zsh.info,  Node: Completion Directories,  Prev: Completion Functions,  Up: Completion System

20.7 Completion Directories
===========================



In the source distribution, the files are contained in various
subdirectories of the Completion directory.  They may have been
installed in the same structure, or into one single function directory.
The following is a description of the files found in the original
directory structure.  If you wish to alter an installed file, you will
need to copy it to some directory which appears earlier in your fpath
than the standard directory where it appears.


Base
     The core functions and special completion widgets automatically
     bound to keys.  You will certainly need most of these, though will
     probably not need to alter them.  Many of these are documented
     above.

Zsh
     Functions for completing arguments of shell builtin commands and
     utility functions for this.  Some of these are also used by
     functions from the Unix directory.

Unix
     Functions for completing arguments of external commands and suites
     of commands.  They may need modifying for your system, although in
     many cases some attempt is made to decide which version of a
     command is present.  For example, completion for the mount command
     tries to determine the system it is running on, while completion
     for many other utilities try to decide whether the GNU version of
     the command is in use, and hence whether the --help option is
     supported.

X, AIX, BSD, ...
     Completion and utility function for commands available only on
     some systems.  These are not arranged hierarchically, so, for
     example, both the Linux and Debian directories, as well as the X
     directory, may be useful on your system.



File: zsh.info,  Node: Completion Using compctl,  Next: Zsh Modules,  Prev: Completion System,  Up: Top

21 Completion Using compctl
***************************



21.1 Types of completion
========================

This version of zsh has two ways of performing completion of words on
the command line.  New users of the shell may prefer to use the newer
and more powerful system based on shell functions; this is described in
*note Completion System::, and the basic shell mechanisms which support
it are described in *note Completion Widgets::.  This chapter describes
the older compctl command.

21.2 Description
================


compctl [ -CDT ] OPTIONS [ COMMAND ... ]

compctl [ -CDT ] OPTIONS [ -x PATTERN OPTIONS - ... -- ] [ + OPTIONS [ -x ... -- ] ... [+] ] [ COMMAND ... ]

compctl -M MATCH-SPECS ...

compctl -L [ -CDTM ] [ COMMAND ... ]

compctl + COMMAND ...


Control the editor's completion behavior according to the supplied set
of OPTIONS.  Various editing commands, notably expand-or-complete-word,
usually bound to tab, will attempt to complete a word typed by the
user, while others, notably delete-char-or-list, usually bound to ^D in
EMACS editing mode, list the possibilities; compctl controls what those
possibilities are.  They may for example be filenames (the most common
case, and hence the default), shell variables, or words from a
user-specified list.

* Menu:

* Command Flags::
* Option Flags::
* Alternative Completion::
* Extended Completion::
* Example::



File: zsh.info,  Node: Command Flags,  Next: Option Flags,  Up: Completion Using compctl

21.3 Command Flags
==================

Completion of the arguments of a command may be different for each
command or may use the default.  The behavior when completing the
command word itself may also be separately specified.  These correspond
to the following flags and arguments, all of which (except for -L) may
be combined with any combination of the OPTIONS described subsequently
in *note Option Flags:::


COMMAND ...
     controls completion for the named commands, which must be listed
     last on the command line.  If completion is attempted for a
     command with a pathname containing slashes and no completion
     definition is found, the search is retried with the last pathname
     component. If the command starts with a =, completion is tried
     with the pathname of the command.

     Any of the COMMAND strings may be patterns of the form normally
     used for filename generation.  These should be be quoted to
     protect them from immediate expansion; for example the command
     string 'foo*' arranges for completion of the words of any command
     beginning with foo.  When completion is attempted, all pattern
     completions are tried in the reverse order of their definition
     until one matches.  By default, completion then proceeds as
     normal, i.e. the shell will try to generate more matches for the
     specific command on the command line; this can be overridden by
     including -tn in the flags for the pattern completion.

     Note that aliases are expanded before the command name is
     determined unless the COMPLETE_ALIASES option is set.  Commands
     may not be combined with the -C, -D or -T flags.

-C
     controls completion when the command word itself is being
     completed.  If no compctl -C command has been issued,  the names
     of any executable command (whether in the path or specific to the
     shell, such as aliases or functions) are completed.

-D
     controls default completion behavior for the arguments of commands
     not assigned any special behavior.  If no compctl -D command has
     been issued, filenames are completed.

-T
     supplies completion flags to be used before any other processing is
     done, even before processing for compctls defined for specific
     commands.  This is especially useful when combined with extended
     completion (the -x flag, see *note Extended Completion:: below).
     Using this flag you can define default behavior which will apply
     to all commands without exception, or you can alter the standard
     behavior for all commands.  For example, if your access to the
     user database is too slow and/or it contains too many users (so
     that completion after `~' is too slow to be usable), you can use


          compctl -T -x 's[~] C[0,[^/]#]' -k friends -S/ -tn

     to complete the strings in the array friends after a `~'.  The
     C[...] argument is necessary so that this form of ~-completion is
     not tried after the directory name is finished.

-L
     lists the existing completion behavior in a manner suitable for
     putting into a start-up script; the existing behavior is not
     changed.  Any combination of the above forms, or the -M flag
     (which must follow the -L flag), may be specified, otherwise all
     defined completions are listed.  Any other flags supplied are
     ignored.

_no argument_
     If no argument is given, compctl lists all defined completions in
     an abbreviated form;  with a list of OPTIONS, all completions with
     those flags set (not counting extended completion) are listed.


If the + flag is alone and followed immediately by the COMMAND list,
the completion behavior for all the commands in the list is reset to
the default.  In other words, completion will subsequently use the
options specified by the -D flag.

The form with -M as the first and only option defines global matching
specifications (see *note Completion Matching Control::). The match
specifications given will be used for every completion attempt (only
when using compctl, not with the new completion system) and are tried
in the order in which they are defined until one generates at least one
match. E.g.:


     compctl -M '' 'm:{a-zA-Z}={A-Za-z}'

This will first try completion without any global match specifications
(the empty string) and, if that generates no matches, will try case
insensitive completion.




File: zsh.info,  Node: Option Flags,  Next: Alternative Completion,  Prev: Command Flags,  Up: Completion Using compctl

21.4 Option Flags
=================


[ -fcFBdeaRGovNAIOPZEnbjrzu/12 ]

[ -k ARRAY ] [ -g GLOBSTRING ] [ -s SUBSTSTRING ]

[ -K FUNCTION ]

[ -Q ] [ -P PREFIX ] [ -S SUFFIX ]

[ -W FILE-PREFIX ] [ -H NUM PATTERN ]

[ -q ] [ -X EXPLANATION ] [ -Y EXPLANATION ]

[ -y FUNC-OR-VAR ] [ -l CMD ] [ -h CMD ] [ -U ]

[ -t CONTINUE ] [ -J NAME ] [ -V NAME ]

[ -M MATCH-SPEC ]


The remaining OPTIONS specify the type of command arguments to look for
during completion.  Any combination of these flags may be specified;
the result is a sorted list of all the possibilities.  The options are
as follows.

* Menu:

* Simple Flags::
* Flags with Arguments::
* Control Flags::



File: zsh.info,  Node: Simple Flags,  Next: Flags with Arguments,  Up: Option Flags

21.4.1 Simple Flags
-------------------

These produce completion lists made up by the shell itself:


-f
     Filenames and filesystem paths.

-/
     Just filesystem paths.

-c
     Command names, including aliases, shell functions, builtins and
     reserved words.

-F
     Function names.

-B
     Names of builtin commands.

-m
     Names of external commands.

-w
     Reserved words.

-a
     Alias names.

-R
     Names of regular (non-global) aliases.

-G
     Names of global aliases.

-d
     This can be combined with -F, -B, -w, -a, -R and -G to get names
     of disabled functions, builtins, reserved words or aliases.

-e
     This option (to show enabled commands) is in effect by default, but
     may be combined with -d; -de in combination with -F, -B, -w, -a,
     -R and -G will complete names of functions, builtins, reserved
     words or aliases whether or not they are disabled.

-o
     Names of shell options (see *note Options::).

-v
     Names of any variable defined in the shell.

-N
     Names of scalar (non-array) parameters.

-A
     Array names.

-I
     Names of integer variables.

-O
     Names of read-only variables.

-p
     Names of parameters used by the shell (including special
     parameters).

-Z
     Names of shell special parameters.

-E
     Names of environment variables.

-n
     Named directories.

-b
     Key binding names.

-j
     Job names:  the first word of the job leader's command line.  This
     is useful with the kill builtin.

-r
     Names of running jobs.

-z
     Names of suspended jobs.

-u
     User names.




File: zsh.info,  Node: Flags with Arguments,  Next: Control Flags,  Prev: Simple Flags,  Up: Option Flags

21.4.2 Flags with Arguments
---------------------------

These have user supplied arguments to determine how the list of
completions is to be made up:


-k ARRAY
     Names taken from the elements of $ARRAY (note that the `$' does
     not appear on the command line).  Alternatively, the argument
     ARRAY itself may be a set of space- or comma-separated values in
     parentheses, in which any delimiter may be escaped with a
     backslash; in this case the argument should be quoted.  For
     example,


          compctl -k "(cputime filesize datasize stacksize
          	       coredumpsize resident descriptors)" limit

-g GLOBSTRING
     The GLOBSTRING is expanded using filename globbing; it should be
     quoted to protect it from immediate expansion. The resulting
     filenames are taken as the possible completions.  Use `*(/)'
     instead of `*/' for directories.  The fignore special parameter is
     not applied to the resulting files.  More than one pattern may be
     given separated by blanks. (Note that brace expansion is _not_
     part of globbing.  Use the syntax `(either|or)' to match
     alternatives.)

-s SUBSTSTRING
     The SUBSTSTRING is split into words and these words are than
     expanded using all shell expansion mechanisms (see *note
     Expansion::).  The resulting words are taken as possible
     completions.  The fignore special parameter is not applied to the
     resulting files.  Note that -g is faster for filenames.

-K FUNCTION
     Call the given function to get the completions.  Unless the name
     starts with an underscore, the function is passed two arguments:
     the prefix and the suffix of the word on which completion is to be
     attempted, in other words those characters before the cursor
     position, and those from the cursor position onwards.  The whole
     command line can be accessed with the -c and -l flags of the read
     builtin. The function should set the variable reply to an array
     containing the completions (one completion per element); note that
     reply should not be made local to the function.  From such a
     function the command line can be accessed with the -c and -l flags
     to the read builtin.  For example,


          function whoson { reply=(`users`); }
          compctl -K whoson talk

     completes only logged-on users after `talk'.  Note that `whoson'
     must return an array, so `reply=`users`' would be incorrect.

-H NUM PATTERN
     The possible completions are taken from the last NUM history
     lines.  Only words matching PATTERN are taken.  If NUM is zero or
     negative the whole history is searched and if PATTERN is the empty
     string all words are taken (as with `*').  A typical use is


          compctl -D -f + -H 0 ''

     which forces completion to look back in the history list for a
     word if no filename matches.




File: zsh.info,  Node: Control Flags,  Prev: Flags with Arguments,  Up: Option Flags

21.4.3 Control Flags
--------------------

These do not directly specify types of name to be completed, but
manipulate the options that do:


-Q
     This instructs the shell not to quote any metacharacters in the
     possible completions.  Normally the results of a completion are
     inserted into the command line with any metacharacters quoted so
     that they are interpreted as normal characters.  This is
     appropriate for filenames and ordinary strings.  However, for
     special effects, such as inserting a backquoted expression from a
     completion array (-k) so that the expression will not be evaluated
     until the complete line is executed, this option must be used.

-P PREFIX
     The PREFIX is inserted just before the completed string; any
     initial part already typed will be completed and the whole PREFIX
     ignored for completion purposes.  For example,


          compctl -j -P "%" kill

     inserts a `%' after the kill command and then completes job names.

-S SUFFIX
     When a completion is found the SUFFIX is inserted after the
     completed string.  In the case of menu completion the suffix is
     inserted immediately, but it is still possible to cycle through the
     list of completions by repeatedly hitting the same key.

-W FILE-PREFIX
     With directory FILE-PREFIX:  for command, file, directory and
     globbing completion (options -c, -f, -/, -g), the file prefix is
     implicitly added in front of the completion.  For example,


          compctl -/ -W ~/Mail maildirs

     completes any subdirectories to any depth beneath the directory
     ~/Mail, although that prefix does not appear on the command line.
     The FILE-PREFIX may also be of the form accepted by the -k flag,
     i.e. the name of an array or a literal list in parenthesis. In
     this case all the directories in the list will be searched for
     possible completions.

-q
     If used with a suffix as specified by the -S option, this causes
     the suffix to be removed if the next character typed is a blank or
     does not insert anything or if the suffix consists of only one
     character and the next character typed is the same character; this
     the same rule used for the AUTO_REMOVE_SLASH option.  The option
     is most useful for list separators (comma, colon, etc.).

-l CMD
     This option restricts the range of command line words that are
     considered to be arguments.  If combined with one of the extended
     completion patterns `p[...]', `r[...]', or `R[...]'  (see *note
     Extended Completion:: below) the range is restricted to the range
     of arguments specified in the brackets.  Completion is then
     performed as if these had been given as arguments to the CMD
     supplied with the option. If the CMD string is empty the first
     word in the range is instead taken as the command name, and
     command name completion performed on the first word in the range.
     For example,


          compctl -x 'r[-exec,;]' -l '' -- find

     completes arguments between `-exec' and the following `;' (or the
     end of the command line if there is no such string) as if they were
     a separate command line.

-h CMD
     Normally zsh completes quoted strings as a whole. With this option,
     completion can be done separately on different parts of such
     strings. It works like the -l option but makes the completion code
     work on the parts of the current word that are separated by
     spaces. These parts are completed as if they were arguments to the
     given CMD. If CMD is the empty string, the first part is completed
     as a command name, as with -l.

-U
     Use the whole list of possible completions, whether or not they
     actually match the word on the command line.  The word typed so far
     will be deleted.  This is most useful with a function (given by the
     -K option) which can examine the word components passed to it (or
     via the read builtin's -c and -l flags) and use its own criteria
     to decide what matches.  If there is no completion, the original
     word is retained.  Since the produced possible completions seldom
     have interesting common prefixes and suffixes, menu completion is
     started immediately if AUTO_MENU is set and this flag is used.

-y FUNC-OR-VAR
     The list provided by FUNC-OR-VAR is displayed instead of the list
     of completions whenever a listing is required; the actual
     completions to be inserted are not affected.  It can be provided
     in two ways. Firstly, if FUNC-OR-VAR begins with a $ it defines a
     variable, or if it begins with a left parenthesis a literal array,
     which contains the list.  A variable may have been set by a call
     to a function using the -K option.  Otherwise it contains the name
     of a function which will be executed to create the list.  The
     function will be passed as an argument list all matching
     completions, including prefixes and suffixes expanded in full, and
     should set the array reply to the result.  In both cases, the
     display list will only be retrieved after a complete list of
     matches has been created.

     Note that the returned list does not have to correspond, even in
     length, to the original set of matches, and may be passed as a
     scalar instead of an array.  No special formatting of characters is
     performed on the output in this case; in particular, newlines are
     printed literally and if they appear output in columns is
     suppressed.

-X EXPLANATION
     Print EXPLANATION when trying completion on the current set of
     options. A `%n' in this string is replaced by the number of
     matches that were added for this explanation string.  The
     explanation only appears if completion was tried and there was no
     unique match, or when listing completions. Explanation strings
     will be listed together with the matches of the group specified
     together with the -X option (using the -J or -V option). If the
     same explanation string is given to multiple -X options, the
     string appears only once (for each group) and the number of
     matches shown for the `%n' is the total number of all matches for
     each of these uses. In any case, the explanation string will only
     be shown if there was at least one match added for the explanation
     string.

     The sequences %B, %b, %S, %s, %U, and %u specify output attributes
     (bold, standout, and underline), %F, %f, %K, %k specify foreground
     and background colours, and %{...%} can be used to include literal
     escape sequences as in prompts.

-Y EXPLANATION
     Identical to -X, except that the EXPLANATION first undergoes
     expansion following the usual rules for strings in double quotes.
     The expansion will be carried out after any functions are called
     for the -K or -y options, allowing them to set variables.

-t CONTINUE
     The CONTINUE-string contains a character that specifies which set
     of completion flags should be used next.  It is useful:

     (i) With -T, or when trying a list of pattern completions, when
     compctl would usually continue with ordinary processing after
     finding matches; this can be suppressed with `-tn'.

     (ii) With a list of alternatives separated by +, when compctl
     would normally stop when one of the alternatives generates
     matches.  It can be forced to consider the next set of completions
     by adding `-t+' to the flags of the alternative before the `+'.

     (iii) In an extended completion list (see below), when compctl
     would normally continue until a set of conditions succeeded, then
     use only the immediately following flags.  With `-t-', compctl will
     continue trying extended completions after the next `-'; with
     `-tx' it will attempt completion with the default flags, in other
     words those before the `-x'.

-J NAME
     This gives the name of the group the matches should be placed in.
     Groups are listed and sorted separately; likewise, menu completion
     will offer the matches in the groups in the order in which the
     groups were defined. If no group name is explicitly given, the
     matches are stored in a group named DEFAULT. The first time a
     group name is encountered, a group with that name is created.
     After that all matches with the same group name are stored in that
     group.

     This can be useful with non-exclusive alternative completions.  For
     example, in


          compctl -f -J files -t+ + -v -J variables foo

     both files and variables are possible completions, as the -t+
     forces both sets of alternatives before and after the + to be
     considered at once.  Because of the -J options, however, all files
     are listed before all variables.

-V NAME
     Like -J, but matches within the group will not be sorted in
     listings nor in menu completion. These unsorted groups are in a
     different name space from the sorted ones, so groups defined as -J
     files and -V files are distinct.

-1
     If given together with the -V option, makes only consecutive
     duplicates in the group be removed. Note that groups with and
     without this flag are in different name spaces.

-2
     If given together with the -J or -V option, makes all duplicates
     be kept. Again, groups with and without this flag are in different
     name spaces.

-M MATCH-SPEC
     This defines additional matching control specifications that
     should be used only when testing words for the list of flags this
     flag appears in. The format of the MATCH-SPEC string is described
     in *note Completion Matching Control::.




File: zsh.info,  Node: Alternative Completion,  Next: Extended Completion,  Prev: Option Flags,  Up: Completion Using compctl

21.5 Alternative Completion
===========================


compctl [ -CDT ] OPTIONS + OPTIONS [ + ... ] [ + ] COMMAND ...


The form with `+' specifies alternative options. Completion is tried
with the options before the first `+'. If this produces no matches
completion is tried with the flags after the `+' and so on. If there
are no flags after the last `+' and a match has not been found up to
that point, default completion is tried.  If the list of flags contains
a -t with a + character, the next list of flags is used even if the
current list produced matches.




File: zsh.info,  Node: Extended Completion,  Next: Example,  Prev: Alternative Completion,  Up: Completion Using compctl

Additional options are available that restrict completion to some part
of the command line; this is referred to as `extended completion'.



21.6 Extended Completion
========================


compctl [ -CDT ] OPTIONS -x PATTERN OPTIONS - ... --

[ COMMAND ... ]

compctl [ -CDT ] OPTIONS [ -x PATTERN OPTIONS - ... -- ]

[ + OPTIONS [ -x ... -- ] ... [+] ] [ COMMAND ... ]


The form with `-x' specifies extended completion for the commands
given; as shown, it may be combined with alternative completion using
`+'.  Each PATTERN is examined in turn; when a match is found, the
corresponding OPTIONS, as described in *note Option Flags:: above, are
used to generate possible completions.  If no PATTERN matches, the
OPTIONS given before the -x are used.

Note that each pattern should be supplied as a single argument and
should be quoted to prevent expansion of metacharacters by the shell.

A PATTERN is built of sub-patterns separated by commas; it matches if
at least one of these sub-patterns matches (they are `or'ed). These
sub-patterns are in turn composed of other sub-patterns separated by
white spaces which match if all of the sub-patterns match (they are
`and'ed).  An element of the sub-patterns is of the form `C[...][...]',
where the pairs of brackets may be repeated as often as necessary, and
matches if any of the sets of brackets match (an `or').  The example
below makes this clearer.

The elements may be any of the following:


s[STRING]...
     Matches if the current word on the command line starts with one of
     the strings given in brackets.  The STRING is not removed and is
     not part of the completion.

S[STRING]...
     Like s[STRING] except that the STRING is part of the completion.

p[FROM,TO]...
     Matches if the number of the current word is between one of the
     FROM and TO pairs inclusive. The comma and TO are optional; TO
     defaults to the same value as FROM.  The numbers may be negative:
     -N refers to the N'th last word on the line.

c[OFFSET,STRING]...
     Matches if the STRING matches the word offset by OFFSET from the
     current word position.  Usually OFFSET will be negative.

C[OFFSET,PATTERN]...
     Like c but using pattern matching instead.

w[INDEX,STRING]...
     Matches if the word in position INDEX is equal to the
     corresponding STRING.  Note that the word count is made after any
     alias expansion.

W[INDEX,PATTERN]...
     Like w but using pattern matching instead.

n[INDEX,STRING]...
     Matches if the current word contains STRING.  Anything up to and
     including the INDEXth occurrence of this string will not be
     considered part of the completion, but the rest will.  INDEX may
     be negative to count from the end: in most cases, INDEX will be 1
     or -1.  For example,


          compctl -s '`users`' -x 'n[1,@]' -k hosts -- talk

     will usually complete usernames, but if you insert an @ after the
     name, names from the array HOSTS (assumed to contain hostnames,
     though you must make the array yourself) will be completed.  Other
     commands such as rcp can be handled similarly.

N[INDEX,STRING]...
     Like n except that the string will be taken as a character class.
     Anything up to and including the INDEXth occurrence of any of the
     characters in STRING will not be considered part of the completion.

m[MIN,MAX]...
     Matches if the total number of words lies between MIN and MAX
     inclusive.

r[STR1,STR2]...
     Matches if the cursor is after a word with prefix STR1.  If there
     is also a word with prefix STR2 on the command line after the one
     matched by STR1 it matches only if the cursor is before this word.
     If the comma and STR2 are omitted, it matches if the cursor is
     after a word with prefix STR1.

R[STR1,STR2]...
     Like r but using pattern matching instead.

q[STR]...
     Matches the word currently being completed is in single quotes and
     the STR begins with the letter `s', or if completion is done in
     double quotes and STR starts with the letter `d', or if completion
     is done in backticks and STR starts with a `b'.




File: zsh.info,  Node: Example,  Prev: Extended Completion,  Up: Completion Using compctl

21.7 Example
============


     compctl -u -x 's[+] c[-1,-f],s[-f+]' \
       -g '~/Mail/*(:t)' - 's[-f],c[-1,-f]' -f -- mail

This is to be interpreted as follows:

If the current command is mail, then



     if ((the current word begins with + and the previous word is -f)
     or (the current word begins with -f+)), then complete the
     non-directory part (the `:t' glob modifier) of files in the
     directory ~/Mail; else

     if the current word begins with -f or the previous word was -f,
     then complete any file; else

     complete user names.



File: zsh.info,  Node: Zsh Modules,  Next: Calendar Function System,  Prev: Completion Using compctl,  Up: Top

22 Zsh Modules
**************



22.1 Description
================

Some optional parts of zsh are in modules, separate from the core of
the shell.  Each of these modules may be linked in to the shell at
build time, or can be dynamically linked while the shell is running if
the installation supports this feature.  The modules that are bundled
with the zsh distribution are:


zsh/cap
     Builtins for manipulating POSIX.1e (POSIX.6) capability
     (privilege) sets.

zsh/clone
     A builtin that can clone a running shell onto another terminal.

zsh/compctl
     The compctl builtin for controlling completion.

zsh/complete
     The basic completion code.

zsh/complist
     Completion listing extensions.

zsh/computil
     A module with utility builtins needed for the shell function based
     completion system.

zsh/curses
     curses windowing commands

zsh/datetime
     Some date/time commands and parameters.

zsh/deltochar
     A ZLE function duplicating EMACS' zap-to-char.

zsh/example
     An example of how to write a module.

zsh/files
     Some basic file manipulation commands as builtins.

zsh/mapfile
     Access to external files via a special associative array.

zsh/mathfunc
     Standard scientific functions for use in mathematical evaluations.

zsh/newuser
     Arrange for files for new users to be installed.

zsh/parameter
     Access to internal hash tables via special associative arrays.

zsh/pcre
     Interface to the PCRE library.

zsh/regex
     Interface to the POSIX regex library.

zsh/sched
     A builtin that provides a timed execution facility within the
     shell.

zsh/net/socket
     Manipulation of Unix domain sockets

zsh/stat
     A builtin command interface to the stat system call.

zsh/system
     A builtin interface to various low-level system features.

zsh/net/tcp
     Manipulation of TCP sockets

zsh/termcap
     Interface to the termcap database.

zsh/terminfo
     Interface to the terminfo database.

zsh/zftp
     A builtin FTP client.

zsh/zle
     The Zsh Line Editor, including the bindkey and vared builtins.

zsh/zleparameter
     Access to internals of the Zsh Line Editor via parameters.

zsh/zprof
     A module allowing profiling for shell functions.

zsh/zpty
     A builtin for starting a command in a pseudo-terminal.

zsh/zselect
     Block and return when file descriptors are ready.

zsh/zutil
     Some utility builtins, e.g. the one for supporting configuration
     via styles.


* Menu:

* The zsh/cap Module::
* The zsh/clone Module::
* The zsh/compctl Module::
* The zsh/complete Module::
* The zsh/complist Module::
* The zsh/computil Module::
* The zsh/curses Module::
* The zsh/datetime Module::
* The zsh/deltochar Module::
* The zsh/example Module::
* The zsh/files Module::
* The zsh/mapfile Module::
* The zsh/mathfunc Module::
* The zsh/newuser Module::
* The zsh/parameter Module::
* The zsh/pcre Module::
* The zsh/regex Module::
* The zsh/sched Module::
* The zsh/net/socket Module::
* The zsh/stat Module::
* The zsh/system Module::
* The zsh/net/tcp Module::
* The zsh/termcap Module::
* The zsh/terminfo Module::
* The zsh/zftp Module::
* The zsh/zle Module::
* The zsh/zleparameter Module::
* The zsh/zprof Module::
* The zsh/zpty Module::
* The zsh/zselect Module::
* The zsh/zutil Module::


File: zsh.info,  Node: The zsh/cap Module,  Next: The zsh/clone Module,  Up: Zsh Modules

22.2 The zsh/cap Module
=======================



   The zsh/cap module is used for manipulating POSIX.1e (POSIX.6)
capability sets.  If the operating system does not support this
interface, the builtins defined by this module will do nothing.  The
builtins in this module are:


cap [ CAPABILITIES ]
     Change the shell's process capability sets to the specified
     CAPABILITIES, otherwise display the shell's current capabilities.

getcap FILENAME ...
     This is a built-in implementation of the POSIX standard utility.
     It displays the capability sets on each specified FILENAME.

setcap CAPABILITIES FILENAME ...
     This is a built-in implementation of the POSIX standard utility.
     It sets the capability sets on each specified FILENAME to the
     specified CAPABILITIES.



File: zsh.info,  Node: The zsh/clone Module,  Next: The zsh/compctl Module,  Prev: The zsh/cap Module,  Up: Zsh Modules

22.3 The zsh/clone Module
=========================



   The zsh/clone module makes available one builtin command:


clone TTY
     Creates a forked instance of the current shell, attached to the
     specified TTY.  In the new shell, the PID, PPID and TTY special
     parameters are changed appropriately.  $! is set to zero in the new
     shell, and to the new shell's PID in the original shell.

     The return status of the builtin is zero in both shells if
     successful, and non-zero on error.

     The target of clone should be an unused terminal, such as an
     unused virtual console or a virtual terminal created by

     xterm -e sh -c 'trap : INT QUIT TSTP; tty; while :; do sleep
     100000000; done'

     Some words of explanation are warranted about this long xterm
     command line: when doing clone on a pseudo-terminal, some other
     session ("session" meant as a unix session group, or SID) is
     already owning the terminal. Hence the cloned zsh cannot acquire
     the pseudo-terminal as a controlling tty. That means two things:

     the job control signals will go to the sh-started-by-xterm process
          group (that's why we disable INT QUIT and TSTP with trap;
     otherwise       the while loop could get suspended or killed)

     the cloned shell will have job control disabled, and the job
     control keys (control-C, control-\ and control-Z) will not work.

     This does not apply when cloning to an `unused' vc.

     Cloning to an used (and unprepared) terminal will result in two
     processes reading simultaneously from the same terminal, with
     input bytes going randomly to either process.

     clone is mostly useful as a shell built-in replacement for openvt.



File: zsh.info,  Node: The zsh/compctl Module,  Next: The zsh/complete Module,  Prev: The zsh/clone Module,  Up: Zsh Modules

22.4 The zsh/compctl Module
===========================



   The zsh/compctl module makes available two builtin commands. compctl,
is the old, deprecated way to control completions for ZLE.  See *note
Completion Using compctl::.  The other builtin command, compcall can be
used in user-defined completion widgets, see *note Completion Widgets::.


File: zsh.info,  Node: The zsh/complete Module,  Next: The zsh/complist Module,  Prev: The zsh/compctl Module,  Up: Zsh Modules

22.5 The zsh/complete Module
============================



   The zsh/complete module makes available several builtin commands
which can be used in user-defined completion widgets, see *note
Completion Widgets::.


File: zsh.info,  Node: The zsh/complist Module,  Next: The zsh/computil Module,  Prev: The zsh/complete Module,  Up: Zsh Modules

22.6 The zsh/complist Module
============================



   The zsh/complist module offers three extensions to completion
listings: the ability to highlight matches in such a list, the ability
to scroll through long lists and a different style of menu completion.



22.6.1 Colored completion listings
----------------------------------

Whenever one of the parameters ZLS_COLORS or ZLS_COLOURS is set and the
zsh/complist module is loaded or linked into the shell, completion
lists will be colored.  Note, however, that complist will not
automatically be loaded if it is not linked in:  on systems with
dynamic loading, `zmodload zsh/complist' is required.

The parameters ZLS_COLORS and ZLS_COLOURS describe how matches are
highlighted.  To turn on highlighting an empty value suffices, in which
case all the default values given below will be used.  The format of
the value of these parameters is the same as used by the GNU version of
the ls command: a colon-separated list of specifications of the form
`NAME=VALUE'.  The NAME may be one of the following strings, most of
which specify file types for which the VALUE will be used.  The strings
and their default values are:


no 0
     for normal text (i.e. when displaying something other than a
     matched file)

fi 0
     for regular files

di 32
     for directories

ln 36
     for symbolic links.  If this has the special value target,
     symbolic links are dereferenced and the target file used to
     determine the display format.

pi 31
     for named pipes (FIFOs)

so 33
     for sockets

bd 44;37
     for block devices

cd 44;37
     for character devices

or NONE
     for a symlink to nonexistent file (default is the value defined
     for ln)

mi NONE
     for a non-existent file (default is the value defined for fi);
     this code is currently not used

su 37;41
     for files with setuid bit set

sg 30;43
     for files with setgid bit set

tw 30;42
     for world writable directories with sticky bit set

ow 34;43
     for world writable directories without sticky bit set

st 37;44
     for directories with sticky bit set but not world writable

ex 35
     for executable files

lc \e[
     for the left code (see below)

rc m
     for the right code

tc 0
     for the character indicating the file type  printed after
     filenames if the LIST_TYPES option is set

sp 0
     for the spaces printed after matches to align the next column

ec NONE
     for the end code


Apart from these strings, the NAME may also be an asterisk (`*')
followed by any string. The VALUE given for such a string will be used
for all files whose name ends with the string.  The NAME may also be an
equals sign (`=') followed by a pattern; the EXTENDED_GLOB option will
be turned on for evaluation of the pattern.  The VALUE given for this
pattern will be used for all matches (not just filenames) whose display
string are matched by the pattern.  Definitions for the form with the
leading equal sign take precedence over the values defined for file
types, which in turn take precedence over the form with the leading
asterisk (file extensions).

The leading-equals form also allows different parts of the displayed
strings to be colored differently.  For this, the pattern has to use the
`(#b)' globbing flag and pairs of parentheses surrounding the parts of
the strings that are to be colored differently.  In this case the VALUE
may consist of more than one color code separated by equal signs.  The
first code will be used for all parts for which no explicit code is
specified and the following codes will be used for the parts matched by
the sub-patterns in parentheses.  For example, the specification
`=(#b)(?)*(?)=0=3=7' will be used for all matches which are at least
two characters long and will use the code `3' for the first character,
`7' for the last character and `0' for the rest.

All three forms of NAME may be preceded by a pattern in parentheses.
If this is given, the VALUE will be used only for matches in groups
whose names are matched by the pattern given in the parentheses.  For
example, `(g*)m*=43' highlights all matches beginning with `m' in
groups whose names  begin with `g' using the color code `43'.  In case
of the `lc', `rc', and `ec' codes, the group pattern is ignored.

Note also that all patterns are tried in the order in which they appear
in the parameter value until the first one matches which is then used.

When printing a match, the code prints the value of lc, the value for
the file-type or the last matching specification with a `*', the value
of rc, the string to display for the match itself, and then the value
of ec if that is defined or the values of lc, no, and rc if ec is not
defined.

The default values are ISO 6429 (ANSI) compliant and can be used on
vt100 compatible terminals such as xterms.  On monochrome terminals the
default values will have no visible effect.  The colors function from
the contribution can be used to get associative arrays containing the
codes for ANSI terminals (see *note Other Functions::).  For example,
after loading colors, one could use `$colors[red]' to get the code for
foreground color red and `$colors[bg-green]' for the code for
background color green.

If the completion system invoked by compinit is used, these parameters
should not be set directly because the system controls them itself.
Instead, the list-colors style should be used (see *note Completion
System Configuration::).



22.6.2 Scrolling in completion listings
---------------------------------------

To enable scrolling through a completion list, the LISTPROMPT parameter
must be set.  Its value will be used as the prompt; if it is the empty
string, a default prompt will be used.  The value may contain escapes
of the form `%x'.  It supports the escapes `%B', `%b', `%S', `%s',
`%U', `%u', `%F', `%f', `%K', `%k' and `%{...%}' used also in shell
prompts as well as three pairs of additional sequences: a `%l' or `%L'
is replaced by the number of the last line shown and the total number
of lines in the form `NUMBER/TOTAL'; a `%m' or `%M' is replaced with
the number of the last match shown and the total number of matches; and
`%p' or `%P' is replaced with `Top', `Bottom' or the position of the
first line shown in percent of the total number of lines, respectively.
In each of these cases the form with the uppercase letter will be
replaced with a string of fixed width, padded to the right with spaces,
while the lowercase form will not be padded.

If the parameter LISTPROMPT is set, the completion code will not ask if
the list should be shown.  Instead it immediately starts displaying the
list, stopping after the first screenful, showing the prompt at the
bottom, waiting for a keypress after temporarily switching to the
listscroll keymap.  Some of the zle functions have a special meaning
while scrolling lists:


send-break
     stops listing discarding the key pressed

accept-line, down-history, down-line-or-history
down-line-or-search, vi-down-line-or-history
     scrolls forward one line

complete-word, menu-complete, expand-or-complete
expand-or-complete-prefix, menu-complete-or-expand
     scrolls forward one screenful


Every other character stops listing and immediately processes the key
as usual.  Any key that is not bound in the listscroll keymap or that
is bound to undefined-key is looked up in the keymap currently selected.

As for the ZLS_COLORS and ZLS_COLOURS parameters, LISTPROMPT should not
be set directly when using the shell function based completion system.
Instead, the list-prompt style should be used.



22.6.3 Menu selection
---------------------

The zsh/complist module also offers an alternative style of selecting
matches from a list, called menu selection, which can be used if the
shell is set up to return to the last prompt after showing a completion
list (see the ALWAYS_LAST_PROMPT option in *note Options::).

Menu selection can be invoked directly by the widget menu-select
defined by this module.  This is a standard ZLE widget that can be
bound to a key in the usual way as described in *note Zsh Line Editor::.

Alternatively, the parameter MENUSELECT can be set to an integer, which
gives the minimum number of matches that must be present before menu
selection is automatically turned on.  This second method requires that
menu completion be started, either directly from a widget such as
menu-complete, or due to one of the options MENU_COMPLETE or AUTO_MENU
being set.  If MENUSELECT is set, but is 0, 1 or empty, menu selection
will always be started during an ambiguous menu completion.

When using the completion system based on shell functions, the
MENUSELECT parameter should not be used (like the ZLS_COLORS and
ZLS_COLOURS parameters described above).  Instead, the menu style
should be used with the select=... keyword.

After menu selection is started, the matches will be listed. If there
are more matches than fit on the screen, only the first screenful is
shown.  The matches to insert into the command line can be selected
from this list.  In the list one match is highlighted using the value
for ma from the ZLS_COLORS or ZLS_COLOURS parameter.  The default value
for this is `7' which forces the selected match to be highlighted using
standout mode on a vt100-compatible terminal.  If neither ZLS_COLORS
nor ZLS_COLOURS is set, the same terminal control sequence as for the
`%S' escape in prompts is used.

If there are more matches than fit on the screen and the parameter
MENUPROMPT is set, its value will be shown below the matches.  It
supports the same escape sequences as LISTPROMPT, but the number of the
match or line shown will be that of the one where the mark is placed.
If its value is the empty string, a default prompt will be used.

The MENUSCROLL parameter can be used to specify how the list is
scrolled.  If the parameter is unset, this is done line by line, if it
is set to `0' (zero), the list will scroll half the number of lines of
the screen.  If the value is positive, it gives the number of lines to
scroll and if it is negative, the list will be scrolled the number of
lines of the screen minus the (absolute) value.

As for the ZLS_COLORS, ZLS_COLOURS and LISTPROMPT parameters, neither
MENUPROMPT nor MENUSCROLL should be set directly when using the shell
function based completion system.  Instead, the select-prompt and
select-scroll styles should be used.

The completion code sometimes decides not to show all of the matches in
the list.  These hidden matches are either matches for which the
completion function which added them explicitly requested that they not
appear in the list (using the -n option of the compadd builtin command)
or they are matches which duplicate a string already in the list
(because they differ only in things like prefixes or suffixes that are
not displayed).  In the list used for menu selection, however, even
these matches are shown so that it is possible to select them.  To
highlight such matches the hi and du capabilities in the ZLS_COLORS and
ZLS_COLOURS parameters are supported for hidden matches of the first
and second kind, respectively.

Selecting matches is done by moving the mark around using the zle
movement functions.  When not all matches can be shown on the screen at
the same time, the list will scroll up and down when crossing the top or
bottom line.  The following zle functions have special meaning during
menu selection:


accept-line
     accepts the current match and leaves menu selection

send-break
     leaves menu selection and restores the previous contents of the
     command line

redisplay, clear-screen
     execute their normal function without leaving menu selection

accept-and-hold, accept-and-menu-complete
     accept the currently inserted match and continue selection
     allowing to select the next match to insert into the line

accept-and-infer-next-history
     accepts the current match and then tries completion with menu
     selection again;  in the case of files this allows one to select a
     directory and immediately attempt to complete files in it;  if
     there are no matches, a message is shown and one can use undo to
     go back to completion on the previous level, every other key
     leaves menu selection (including the other zle functions which are
     otherwise special during menu selection)

undo
     removes matches inserted during the menu selection by one of the
     three functions before

down-history, down-line-or-history
vi-down-line-or-history,  down-line-or-search
     moves the mark one line down

up-history, up-line-or-history
vi-up-line-or-history, up-line-or-search
     moves the mark one line up

forward-char, vi-forward-char
     moves the mark one column right

backward-char, vi-backward-char
     moves the mark one column left

forward-word, vi-forward-word
vi-forward-word-end, emacs-forward-word
     moves the mark one screenful down

backward-word, vi-backward-word, emacs-backward-word
     moves the mark one screenful up

vi-forward-blank-word, vi-forward-blank-word-end
     moves the mark to the first line of the next group of matches

vi-backward-blank-word
     moves the mark to the last line of the previous group of matches

beginning-of-history
     moves the mark to the first line

end-of-history
     moves the mark to the last line

beginning-of-buffer-or-history, beginning-of-line
beginning-of-line-hist, vi-beginning-of-line
     moves the mark to the leftmost column

end-of-buffer-or-history, end-of-line
end-of-line-hist, vi-end-of-line
     moves the mark to the rightmost column

complete-word, menu-complete, expand-or-complete
expand-or-complete-prefix, menu-expand-or-complete
     moves the mark to the next match

reverse-menu-complete
     moves the mark to the previous match

vi-insert
     this toggles between normal and interactive mode; in interactive
     mode the keys bound to self-insert and self-insert-unmeta insert
     into the command line as in normal editing mode but without leaving
     menu selection; after each character completion is tried again and
     the list changes to contain only the new matches; the completion
     widgets make the longest unambiguous string be inserted in the
     command line and undo and backward-delete-char go back to the
     previous set of matches

history-incremental-search-forward,
     history-incremental-search-backward this starts incremental
     searches in the list of completions displayed; in this mode,
     accept-line only leaves incremental search, going back to the
     normal menu selection mode


All movement functions wrap around at the edges; any other zle function
not listed leaves menu selection and executes that function.  It is
possible to make widgets in the above list do the same by using the
form of the widget with a `.' in front.  For example, the widget
`.accept-line' has the effect of leaving menu selection and accepting
the entire command line.

During this selection the widget uses the keymap menuselect.  Any key
that is not defined in this keymap or that is bound to undefined-key is
looked up in the keymap currently selected.  This is used to ensure
that the most important keys used during selection (namely the cursor
keys, return, and TAB) have sensible defaults.  However, keys in the
menuselect keymap can be modified directly using the bindkey builtin
command (see *note The zsh/zle Module::). For example, to make the
return key leave menu selection without accepting the match currently
selected one could call



     bindkey -M menuselect '^M' send-break

after loading the zsh/complist module.


File: zsh.info,  Node: The zsh/computil Module,  Next: The zsh/curses Module,  Prev: The zsh/complist Module,  Up: Zsh Modules

22.7 The zsh/computil Module
============================



   The zsh/computil module adds several builtin commands that are used
by some of the completion functions in the completion system based on
shell functions (see *note Completion System:: ).  Except for compquote
these builtin commands are very specialised and thus not very
interesting when writing your own completion functions.  In summary,
these builtin commands are:


comparguments
     This is used by the _arguments function to do the argument and
     command line parsing.  Like compdescribe it has an option -i to do
     the parsing and initialize some internal state and various options
     to access the state information to decide what should be completed.

compdescribe
     This is used by the _describe function to build the displays for
     the matches and to get the strings to add as matches with their
     options.  On the first call one of the options -i or -I should be
     supplied as the first argument.  In the first case, display
     strings without the descriptions will be generated, in the second
     case, the string used to separate the matches from their
     descriptions must be given as the second argument and the
     descriptions (if any) will be shown.  All other arguments are like
     the definition arguments to _describe itself.

     Once compdescribe has been called with either the -i or the -I
     option, it can be repeatedly called with the -g option and the
     names of five arrays as its arguments.  This will step through the
     different sets of matches and store the options in the first array,
     the strings with descriptions in the second, the matches for these
     in the third, the strings without descriptions in the fourth, and
     the matches for them in the fifth array.  These are then directly
     given to compadd to register the matches with the completion code.

compfiles
     Used by the _path_files function to optimize complex recursive
     filename generation (globbing).  It does three things.  With the
     -p and -P options it builds the glob patterns to use, including
     the paths already handled and trying to optimize the patterns with
     respect to the prefix and suffix from the line and the match
     specification currently used.  The -i option does the directory
     tests for the ignore-parents style and the -r option tests if a
     component for some of the matches are equal to the string on the
     line and removes all other matches if that is true.

compgroups
     Used by the _tags function to implement the internals of the
     group-order style.  This only takes its arguments as names of
     completion groups and creates the groups for it (all six types:
     sorted and unsorted, both without removing duplicates, with
     removing all duplicates and with removing consecutive duplicates).

compquote [ -p ] NAMES ...
     There may be reasons to write completion functions that have to add
     the matches using the -Q option to compadd and perform quoting
     themselves.  Instead of interpreting the first character of the
     all_quotes key of the compstate special association and using the
     q flag for parameter expansions, one can use this builtin command.
     The arguments are the names of scalar or array parameters and the
     values of these parameters are quoted as needed for the innermost
     quoting level.  If the -p option is given, quoting is done as if
     there is some prefix before the values of the parameters, so that
     a leading equal sign will not be quoted.

     The return status is non-zero in case of an error and zero
     otherwise.

comptags
comptry
     These implement the internals of the tags mechanism.

compvalues
     Like comparguments, but for the _values function.



File: zsh.info,  Node: The zsh/curses Module,  Next: The zsh/datetime Module,  Prev: The zsh/computil Module,  Up: Zsh Modules

22.8 The zsh/curses Module
==========================



   The zsh/curses module makes available one builtin command and
various parameters.



22.8.1 Builtin
--------------


zcurses init
zcurses end
zcurses addwin TARGETWIN NLINES NCOLS BEGIN_Y BEGIN_X [ PARENTWIN ]
zcurses delwin TARGETWIN
zcurses refresh [ TARGETWIN ... ]
zcurses touch TARGETWIN ...
zcurses move TARGETWIN NEW_Y NEW_X
zcurses clear TARGETWIN [ redraw | eol | bot ]
zcurses position TARGETWIN ARRAY
zcurses char TARGETWIN CHARACTER
zcurses string TARGETWIN STRING
zcurses border TARGETWIN BORDER
zcurses attr TARGETWIN [ {+/-}ATTRIBUTE | FG_COL/BG_COL ] [...]
zcurses bg TARGETWIN [ {+/-}ATTRIBUTE | FG_COL/BG_COL | @CHAR ] [...]
zcurses scroll TARGETWIN [ on | off | {+/-}LINES ]
zcurses input TARGETWIN [ PARAM [ KPARAM [ MPARAM ] ] ]
zcurses mouse [ delay NUM | {+/-}motion ]
zcurses timeout TARGETWIN INTVAL
zcurses querychar TARGETWIN [ PARAM ]
     Manipulate curses windows.  All uses of this command should be
     bracketed by `zcurses init' to initialise use of curses, and
     `zcurses end' to end it; omitting `zcurses end' can cause the
     terminal to be in an unwanted state.

     The subcommand addwin creates a window with NLINES lines and NCOLS
     columns.  Its upper left corner will be placed at row BEGIN_Y and
     column BEGIN_X of the screen.  TARGETWIN is a string and refers to
     the name of a window that is not currently assigned.  Note in
     particular the curses convention that vertical values appear
     before horizontal values.

     If addwin is given an existing window as the final argument, the
     new window is created as a subwindow of PARENTWIN.  This differs
     from an ordinary new window in that the memory of the window
     contents is shared with the parent's memory.  Subwindows must be
     deleted before their parent.  Note that the coordinates of
     subwindows are relative to the screen, not the parent, as with
     other windows.

     Use the subcommand delwin to delete a window created with addwin.
     Note that end does _not_ implicitly delete windows, and that
     delwin does not erase the screen image of the window.

     The window corresponding to the full visible screen is called
     stdscr; it always exists after `zcurses init' and cannot be delete
     with delwin.

     The subcommand refresh will refresh window TARGETWIN; this is
     necessary to make any pending changes (such as characters you have
     prepared for output with char) visible on the screen.  refresh
     without an argument causes the screen to be cleared and redrawn.
     If multiple windows are given, the screen is updated once at the
     end.

     The subcommand touch marks the TARGETWINs listed as changed.  This
     is necessary before refreshing windows if a window that was in
     front of another window (which may be stdscr) is deleted.

     The subcommand move moves the cursor position in TARGETWIN to new
     coordinates NEW_Y and NEW_X.  Note that the subcommand string (but
     not the subcommand char) advances the cursor position over the
     characters added.

     The subcommand clear erases the contents of TARGETWIN.  One (and
     no more than one) of three options may be specified.  With the
     option redraw, in addition the next refresh of TARGETWIN will
     cause the screen to be cleared and repainted.  With the option
     eol, TARGETWIN is only cleared to the end of the current cursor
     line.  With the option bot, TARGETWIN is cleared to the end of the
     window, i.e everything to the right and below the cursor is
     cleared.

     The subcommand position writes various positions associated with
     TARGETWIN into the array named ARRAY.  These are, in order:

          The y and x coordinates of the cursor relative to the top left
          of TARGETWIN


          The y and x coordinates of the top left of TARGETWIN on the
          screen


          The size of TARGETWIN in y and x dimensions.

     Outputting characters and strings are achieved by char and string
     respectively.

     To draw a border around window TARGETWIN, use border.  Note that
     the border is not subsequently handled specially:  in other words,
     the border is simply a set of characters output at the edge of the
     window.  Hence it can be overwritten, can scroll off the window,
     etc.

     The subcommand attr will set TARGETWIN's attributes or
     foreground/background color pair for any successive character
     output.  Each ATTRIBUTE given on the line may be prepended by a +
     to set or a - to unset that attribute; + is assumed if absent.  The
     attributes supported are blink, bold, dim, reverse, standout, and
     underline.

     Each FG_COL/BG_COL attribute (to be read as `FG_COL on BG_COL')
     sets the foreground and background color for character output.
     The color default is sometimes available (in particular if the
     library is ncurses), specifying the foreground or background color
     with which the terminal started.  The color pair default/default
     is always available.

     bg overrides the color and other attributes of all characters in
     the window.  Its usual use is to set the background initially, but
     it will overwrite the attributes of any characters at the time
     when it is called.  In addition to the arguments allowed with
     attr, an argument @CHAR specifies a character to be shown in
     otherwise blank areas of the window.  Owing to limitations of
     curses this cannot be a multibyte character (use of ASCII
     characters only is recommended).  As the specified set of
     attributes override the existing background, turning attributes
     off in the arguments is not useful, though this does not cause an
     error.

     The subcommand scroll can be used with on or off to enabled or
     disable scrolling of a window when the cursor would otherwise move
     below the window due to typing or output.  It can also be used
     with a positive or negative integer to scroll the window up or
     down the given number of lines without changing the current cursor
     position (which therefore appears to move in the opposite
     direction relative to the window).  In the second case, if
     scrolling is off it is temporarily turned on to allow the window
     to be scrolled.

     The subcommand input reads a single character from the window
     without echoing it back.  If PARAM is supplied the character is
     assigned to the parameter PARAM, else it is assigned to the
     parameter REPLY.

     If both PARAM and KPARAM are supplied, the key is read in `keypad'
     mode.  In this mode special keys such as function keys and arrow
     keys return the name of the key in the parameter KPARAM.  The key
     names are the macros defined in the curses.h or ncurses.h with the
     prefix `KEY_' removed; see also the description of the parameter
     zcurses_keycodes below.  Other keys cause a value to be set in
     PARAM as before.  On a successful return only one of PARAM or
     KPARAM contains a non-empty string; the other is set to an empty
     string.

     If MPARAM is also supplied, input attempts to handle mouse input.
     This is only available with the ncurses library; mouse handling
     can be detected by checking for the exit status of `zcurses mouse'
     with no arguments.  If a mouse button is clicked (or double- or
     triple-clicked, or pressed or released with a configurable delay
     from being clicked) then kparam is set to the string MOUSE, and
     MPARAM is set to an array consisting of the following elements:
    -
          An identifier to discriminate different input devices; this
          is only rarely useful.

    -
          The x, y and z coordinates of the mouse click relative to the
          full screen, as three elements in that order (i.e. the y
          coordinate is, unusually, after the x coordinate).  The z
          coordinate is only available for a few unusual input devices
          and is otherwise set to zero.

    -
          Any events that occurred as separate items; usually there
          will be just one.  An event consists of PRESSED, RELEASED,
          CLICKED, DOUBLE_CLICKED or TRIPLE_CLICKED followed
          immediately (in the same element) by the number of the button.

    -
          If the shift key was pressed, the string SHIFT.

    -
          If the control key was pressed, the string CTRL.

    -
          If the alt key was pressed, the string ALT.

     Not all mouse events may be passed through to the terminal window;
     most terminal emulators handle some mouse events themselves.  Note
     that the ncurses manual implies that using input both with and
     without mouse handling may cause the mouse cursor to appear and
     disappear.

     The subcommand mouse can be used to configure the use of the mouse.
     There is no window argument; mouse options are global.  `zcurses
     mouse' with no arguments returns status 0 if mouse handling is
     possible, else status 1.  Otherwise, the possible arguments (which
     may be combined on the same command line) are as follows.  delay
     NUM sets the maximum delay in milliseconds between press and
     release events to be considered as a click; the value 0 disables
     click resolution, and the default is one sixth of a second.
     motion proceeded by an optional `+' (the default) or - turns on or
     off reporting of mouse motion in addition to clicks, presses and
     releases, which are always reported.  However, it appears reports
     for mouse motion are not currently implemented.

     The subcommand timeout specifies a timeout value for input from
     TARGETWIN.  If INTVAL is negative, `zcurses input' waits
     indefinitely for a character to be typed; this is the default.  If
     INTVAL is zero, `zcurses input' returns immediately; if there is
     typeahead it is returned, else no input is done and status 1 is
     returned.  If INTVAL is positive, `zcurses input' waits INTVAL
     milliseconds for input and if there is none at the end of that
     period returns status 1.

     The subcommand querychar queries the character at the current
     cursor position.  The return values are stored in the array named
     PARAM if supplied, else in the array reply.  The first value is
     the character (which may be a multibyte character if the system
     supports them); the second is the color pair in the usual
     FG_COL/BG_COL notation, or 0 if color is not supported.  Any
     attributes other than color that apply to the character, as set
     with the subcommand attr, appear as additional elements.



22.8.2 Parameters
-----------------


ZCURSES_COLORS
     Readonly integer.  The maximum number of colors the terminal
     supports.  This value is initialised by the curses library and is
     not available until the first time zcurses init is run.

ZCURSES_COLOR_PAIRS
     Readonly integer.  The maximum number of color pairs FG_COL/BG_COL
     that may be defined in `zcurses attr' commands; note this limit
     applies to all color pairs that have been used whether or not they
     are currently active.  This value is initialised by the curses
     library and is not available until the first time zcurses init is
     run.

zcurses_attrs
     Readonly array.  The attributes supported by zsh/curses; available
     as soon as the module is loaded.

zcurses_colors
     Readonly array.  The colors supported by zsh/curses; available as
     soon as the module is loaded.

zcurses_keycodes
     Readonly array.  The values that may be returned in the second
     parameter supplied to `zcurses input' in the order in which they
     are defined internally by curses.  Not all function keys are
     listed, only F0; curses reserves space for F0 up to F63.

zcurses_windows
     Readonly array.  The current list of windows, i.e. all windows that
     have been created with `zcurses addwin' and not removed with
     `zcurses delwin'.



File: zsh.info,  Node: The zsh/datetime Module,  Next: The zsh/deltochar Module,  Prev: The zsh/curses Module,  Up: Zsh Modules

22.9 The zsh/datetime Module
============================



   The zsh/datetime module makes available one builtin command:


strftime [ -s SCALAR ] FORMAT EPOCHTIME
strftime -r [ -q ] [ -s SCALAR ] FORMAT TIMESTRING
     Output the date denoted by EPOCHTIME in the FORMAT specified.

     With the option -r (reverse), use the format FORMAT to parse the
     input string TIMESTRING and output the number of seconds since the
     epoch at which the time occurred.  If no timezone is parsed, the
     current timezone is used; other parameters are set to zero if not
     present.  If TIMESTRING does not match FORMAT the command returns
     status 1; it will additionally print an error message unless the
     option -q (quiet) is given.  If TIMESTRING matches FORMAT but not
     all characters in TIMESTRING were used, the conversion succeeds;
     however, a warning is issued unless the option -q is given.  The
     matching is implemented by the system function strptime; see man
     page strptime(3).  This means that zsh format extensions are not
     available, however for reverse lookup they are not required.  If
     the function is not implemented, the command returns status 2 and
     (unless -q is given) prints a message.

     If -s SCALAR is given, assign the date string (or epoch time in
     seconds if -r is given) to SCALAR instead of printing it.


The zsh/datetime module makes available one parameter:


EPOCHSECONDS
     An integer value representing the number of seconds since the
     epoch.



File: zsh.info,  Node: The zsh/deltochar Module,  Next: The zsh/example Module,  Prev: The zsh/datetime Module,  Up: Zsh Modules

22.10 The zsh/deltochar Module
==============================



   The zsh/deltochar module makes available two ZLE functions:


delete-to-char
     Read a character from the keyboard, and delete from the cursor
     position up to and including the next (or, with repeat count N,
     the Nth) instance of that character.  Negative repeat counts mean
     delete backwards.

zap-to-char
     This behaves like delete-to-char, except that the final occurrence
     of the character itself is not deleted.



File: zsh.info,  Node: The zsh/example Module,  Next: The zsh/files Module,  Prev: The zsh/deltochar Module,  Up: Zsh Modules

22.11 The zsh/example Module
============================



   The zsh/example module makes available one builtin command:


example [ -flags ] [ ARGS ... ]
     Displays the flags and arguments it is invoked with.


The purpose of the module is to serve as an example of how to write a
module.


File: zsh.info,  Node: The zsh/files Module,  Next: The zsh/mapfile Module,  Prev: The zsh/example Module,  Up: Zsh Modules

22.12 The zsh/files Module
==========================



   The zsh/files module makes available some common commands for file
manipulation as builtins; these commands are probably not needed for
many normal situations but can be useful in emergency recovery
situations with constrained resources.  The commands do not implement
all features now required by relevant standards committees.

For all commands, a variant beginning zf_ is also available and loaded
automatically.  Using the features capability of zmodload will let you
load only those names you want.

The commands loaded by default are:


chgrp [ -hRs ] GROUP FILENAME ...
     Changes group of files specified.  This is equivalent to chown with
     a USER-SPEC argument of `:GROUP'.

chown [ -hRs ] USER-SPEC FILENAME ...
     Changes ownership and group of files specified.

     The USER-SPEC can be in four forms:


    USER
          change owner to USER; do not change group

    USER::
          change owner to USER; do not change group

    USER:
          change owner to USER; change group to USER's primary group

    USER:GROUP
          change owner to USER; change group to GROUP

    :GROUP
          do not change owner; change group to GROUP

     In each case, the `:' may instead be a `.'.  The rule is that if
     there is a `:' then the separator is `:', otherwise if there is a
     `.' then the separator is `.', otherwise there is no separator.

     Each of USER and GROUP may be either a username (or group name, as
     appropriate) or a decimal user ID (group ID).  Interpretation as a
     name takes precedence, if there is an all-numeric username (or
     group name).

     If the target is a symbolic link, the -h option causes chown to set
     the ownership of the link instead of its target.

     The -R option causes chown to recursively descend into directories,
     changing the ownership of all files in the directory after
     changing the ownership of the directory itself.

     The -s option is a zsh extension to chown functionality.  It
     enables paranoid behaviour, intended to avoid security problems
     involving a chown being tricked into affecting files other than
     the ones intended.  It will refuse to follow symbolic links, so
     that (for example) ``chown luser /tmp/foo/passwd'' can't
     accidentally chown /etc/passwd if /tmp/foo happens to be a link to
     /etc.  It will also check where it is after leaving directories,
     so that a recursive chown of a deep directory tree can't end up
     recursively chowning /usr as a result of directories being moved
     up the tree.

ln [ -dfhins ] FILENAME DEST
ln [ -dfhins ] FILENAME ... DIR
     Creates hard (or, with -s, symbolic) links.  In the first form, the
     specified DESTination is created, as a link to the specified
     FILENAME.  In the second form, each of the FILENAMEs is taken in
     turn, and linked to a pathname in the specified DIRectory that has
     the same last pathname component.

     Normally, ln will not attempt to create hard links to directories.
     This check can be overridden using the -d option.  Typically only
     the super-user can actually succeed in creating hard links to
     directories.  This does not apply to symbolic links in any case.

     By default, existing files cannot be replaced by links.  The -i
     option causes the user to be queried about replacing existing
     files.  The -f option causes existing files to be silently
     deleted, without querying.  -f takes precedence.

     The -h and -n options are identical and both exist for
     compatibility; either one indicates that if the target is a symlink
     then it should not be dereferenced.  Typically this is used in
     combination with -sf so that if an existing link points to a
     directory then it will be removed, instead of followed.  If this
     option is used with multiple filenames and the target is a
     symbolic link pointing to a directory then the result is an error.

mkdir [ -p ] [ -m MODE ] DIR ...
     Creates directories.  With the -p option, non-existing parent
     directories are first created if necessary, and there will be no
     complaint if the directory already exists.  The -m option can be
     used to specify (in octal) a set of file permissions for the
     created directories, otherwise mode 777 modified by the current
     umask (see man page umask(2)) is used.

mv [ -fi ] FILENAME DEST
mv [ -fi ] FILENAME ... DIR
     Moves files.  In the first form, the specified FILENAME is moved
     to the specified DESTination.  In the second form, each of the
     FILENAMEs is taken in turn, and moved to a pathname in the
     specified DIRectory that has the same last pathname component.

     By default, the user will be queried before replacing any file
     that the user cannot write to, but writable files will be silently
     removed.  The -i option causes the user to be queried about
     replacing any existing files.  The -f option causes any existing
     files to be silently deleted, without querying.  -f takes
     precedence.

     Note that this mv will not move files across devices.  Historical
     versions of mv, when actual renaming is impossible, fall back on
     copying and removing files; if this behaviour is desired, use cp
     and rm manually.  This may change in a future version.

rm [ -dfirs ] FILENAME ...
     Removes files and directories specified.

     Normally, rm will not remove directories (except with the -r
     option).  The -d option causes rm to try removing directories with
     unlink (see man page unlink(2)), the same method used for files.
     Typically only the super-user can actually succeed in unlinking
     directories in this way.  -d takes precedence over -r.

     By default, the user will be queried before removing any file that
     the user cannot write to, but writable files will be silently
     removed.  The -i option causes the user to be queried about
     removing any files.  The -f option causes files to be silently
     deleted, without querying, and suppresses all error indications.
     -f takes precedence.

     The -r option causes rm to recursively descend into directories,
     deleting all files in the directory before removing the directory
     with the rmdir system call (see man page rmdir(2)).

     The -s option is a zsh extension to rm functionality.  It enables
     paranoid behaviour, intended to avoid common security problems
     involving a root-run rm being tricked into removing files other
     than the ones intended.  It will refuse to follow symbolic links,
     so that (for example) ``rm /tmp/foo/passwd'' can't accidentally
     remove /etc/passwd if /tmp/foo happens to be a link to /etc.  It
     will also check where it is after leaving directories, so that a
     recursive removal of a deep directory tree can't end up
     recursively removing /usr as a result of directories being moved
     up the tree.

rmdir DIR ...
     Removes empty directories specified.

sync
     Calls the system call of the same name (see man page sync(2)),
     which flushes dirty buffers to disk.  It might return before the
     I/O has actually been completed.



File: zsh.info,  Node: The zsh/mapfile Module,  Next: The zsh/mathfunc Module,  Prev: The zsh/files Module,  Up: Zsh Modules

22.13 The zsh/mapfile Module
============================



   The zsh/mapfile module provides one special associative array
parameter of the same name.


mapfile
     This associative array takes as keys the names of files; the
     resulting value is the content of the file.  The value is treated
     identically to any other text coming from a parameter.  The value
     may also be assigned to, in which case the file in question is
     written (whether or not it originally existed); or an element may
     be unset, which will delete the file in question.  For example,
     `vared mapfile[myfile]' works as expected, editing the file
     `myfile'.

     When the array is accessed as a whole, the keys are the names of
     files in the current directory, and the values are empty (to save
     a huge overhead in memory).  Thus ${(k)mapfile} has the same
     affect as the glob operator *(D), since files beginning with a dot
     are not special.  Care must be taken with expressions such as rm
     ${(k)mapfile}, which will delete every file in the current
     directory without the usual `rm *' test.

     The parameter mapfile may be made read-only; in that case, files
     referenced may not be written or deleted.

     A file may conveniently be read into an array as one line per
     element with the form `ARRAY=("${(f)mapfile[FILENAME]}")'.  The
     double quotes are necessary to prevent empty lines from being
     removed.



22.13.1 Limitations
-------------------

Although reading and writing of the file in question is efficiently
handled, zsh's internal memory management may be arbitrarily baroque;
however, mapfile is usually very much more efficient than anything
involving a loop.  Note in particular that the whole contents of the
file will always reside physically in memory when accessed (possibly
multiple times, due to standard parameter substitution operations).  In
particular, this means handling of sufficiently long files (greater
than the machine's swap space, or than the range of the pointer type)
will be incorrect.

No errors are printed or flagged for non-existent, unreadable, or
unwritable files, as the parameter mechanism is too low in the shell
execution hierarchy to make this convenient.

It is unfortunate that the mechanism for loading modules does not yet
allow the user to specify the name of the shell parameter to be given
the special behaviour.


File: zsh.info,  Node: The zsh/mathfunc Module,  Next: The zsh/newuser Module,  Prev: The zsh/mapfile Module,  Up: Zsh Modules

22.14 The zsh/mathfunc Module
=============================



   The zsh/mathfunc module provides standard mathematical functions for
use when evaluating mathematical formulae.  The syntax agrees with
normal C and FORTRAN conventions, for example,


     (( f = sin(0.3) ))

assigns the sine of 0.3 to the parameter f.

Most functions take floating point arguments and return a floating point
value.  However, any necessary conversions from or to integer type will
be performed automatically by the shell.  Apart from atan with a second
argument and the abs, int and float functions, all functions behave as
noted in the manual page for the corresponding C function, except that
any arguments out of range for the function in question will be
detected by the shell and an error reported.

The following functions take a single floating point argument: acos,
acosh, asin, asinh, atan, atanh, cbrt, ceil, cos, cosh, erf, erfc, exp,
expm1, fabs, floor, gamma, j0, j1, lgamma, log, log10, log1p, logb,
sin, sinh, sqrt, tan, tanh, y0, y1.  The atan function can optionally
take a second argument, in which case it behaves like the C function
atan2.  The ilogb function takes a single floating point argument, but
returns an integer.

The function signgam takes no arguments, and returns an integer, which
is the C variable of the same name, as described in man page gamma(3).
Note that it is therefore only useful immediately after a call to gamma
or lgamma.  Note also that `signgam(RPAR' and `signgam' are distinct
expressions.

The following functions take two floating point arguments: copysign,
fmod, hypot, nextafter.

The following take an integer first argument and a floating point second
argument: jn, yn.

The following take a floating point first argument and an integer second
argument: ldexp, scalb.

The function abs does not convert the type of its single argument; it
returns the absolute value of either a floating point number or an
integer.  The functions float and int convert their arguments into a
floating point or integer value (by truncation) respectively.

Note that the C pow function is available in ordinary math evaluation
as the `**' operator and is not provided here.

The function rand48 is available if your system's mathematical library
has the function erand48(3).  It returns a pseudo-random floating point
number between 0 and 1.  It takes a single string optional argument.

If the argument is not present, the random number seed is initialised by
three calls to the rand(3) function -- this produces the same random
numbers as the next three values of $RANDOM.

If the argument is present, it gives the name of a scalar parameter
where the current random number seed will be stored.  On the first
call, the value must contain at least twelve hexadecimal digits (the
remainder of the string is ignored), or the seed will be initialised in
the same manner as for a call to rand48 with no argument.  Subsequent
calls to rand48(PARAM) will then maintain the seed in the parameter
PARAM as a string of twelve hexadecimal digits, with no base signifier.
The random number sequences for different parameters are completely
independent, and are also independent from that used by calls to rand48
with no argument.

For example, consider


     print $(( rand48(seed) ))
     print $(( rand48() ))
     print $(( rand48(seed) ))

Assuming $seed does not exist, it will be initialised by the first
call.  In the second call, the default seed is initialised; note,
however, that because of the properties of rand() there is a
correlation between the seeds used for the two initialisations, so for
more secure uses, you should generate your own 12-byte seed.  The third
call returns to the same sequence of random numbers used in the first
call, unaffected by the intervening rand48().


File: zsh.info,  Node: The zsh/newuser Module,  Next: The zsh/parameter Module,  Prev: The zsh/mathfunc Module,  Up: Zsh Modules

22.15 The zsh/newuser Module
============================



   The zsh/newuser module is loaded at boot if it is available, the RCS
option is set, and the PRIVILEGED option is not set (all three are true
by default).  This takes place immediately after commands in the global
zshenv file (typically /etc/zshenv), if any, have been executed.  If
the module is not available it is silently ignored by the shell; the
module may safely be removed from $MODULE_PATH by the administrator if
it is not required.

On loading, the module tests if any of the start-up files .zshenv,
.zprofile, .zshrc or .zlogin exist in the directory given by the
environment variable ZDOTDIR, or the user's home directory if that is
not set.  The test is not performed and the module halts processing if
the shell was in an emulation mode (i.e. had been invoked as some other
shell than zsh).

If none of the start-up files were found, the module then looks for the
file newuser first in a sitewide directory, usually the parent
directory of the site-functions directory, and if that is not found the
module searches in a version-specific directory, usually the parent of
the functions directory containing version-specific functions.  (These
directories can be configured when zsh is built using the
-enable-site-scriptdir=DIR and -enable-scriptdir=DIR flags to
configure, respectively; the defaults are PREFIX/share/zsh and
PREFIX/share/zsh/$ZSH_VERSION where the default PREFIX is /usr/local.)

If the file newuser is found, it is then sourced in the same manner as
a start-up file.  The file is expected to contain code to install
start-up files for the user, however any valid shell code will be
executed.

The zsh/newuser module is then unconditionally unloaded.

Note that it is possible to achieve exactly the same effect as the
zsh/newuser module by adding code to /etc/zshenv.  The module exists
simply to allow the shell to make arrangements for new users without
the need for intervention by package maintainers and system
administrators.

The script supplied with the module invokes the shell function
zsh-newuser-install.  This may be invoked directly by the user even if
the zsh/newuser module is disabled.  Note, however, that if the module
is not installed the function will not be installed either.  The
function is documented in *note User Configuration Functions::.


File: zsh.info,  Node: The zsh/parameter Module,  Next: The zsh/pcre Module,  Prev: The zsh/newuser Module,  Up: Zsh Modules

22.16 The zsh/parameter Module
==============================



   The zsh/parameter module gives access to some of the internal hash
tables used by the shell by defining some special parameters.


options
     The keys for this associative array are the names of the options
     that can be set and unset using the setopt and unsetopt builtins.
     The value of each key is either the string on if the option is
     currently set, or the string off if the option is unset.  Setting
     a key to one of these strings is like setting or unsetting the
     option, respectively. Unsetting a key in this array is like
     setting it to the value off.

commands
     This array gives access to the command hash table. The keys are the
     names of external commands, the values are the pathnames of the
     files that would be executed when the command would be invoked.
     Setting a key in this array defines a new entry in this table in
     the same way as with the hash builtin. Unsetting a key as in `unset
     "commands[foo]"' removes the entry for the given key from the
     command hash table.

functions
     This associative array maps names of enabled functions to their
     definitions. Setting a key in it is like defining a function with
     the name given by the key and the body given by the value.
     Unsetting a key removes the definition for the function named by
     the key.

dis_functions
     Like functions but for disabled functions.

builtins
     This associative array gives information about the builtin commands
     currently enabled. The keys are the names of the builtin commands
     and the values are either `undefined' for builtin commands that
     will automatically be loaded from a module if invoked or `defined'
     for builtin commands that are already loaded.

dis_builtins
     Like builtins but for disabled builtin commands.

reswords
     This array contains the enabled reserved words.

dis_reswords
     Like reswords but for disabled reserved words.

aliases
     This maps the names of the regular aliases currently enabled to
     their expansions.

dis_aliases
     Like aliases but for disabled regular aliases.

galiases
     Like aliases, but for global aliases.

dis_galiases
     Like galiases but for disabled global aliases.

saliases
     Like raliases, but for suffix aliases.

dis_saliases
     Like saliases but for disabled suffix aliases.

parameters
     The keys in this associative array are the names of the parameters
     currently defined. The values are strings describing the type of
     the parameter, in the same format used by the t parameter flag, see
     *note Parameter Expansion:: .  Setting or unsetting keys in this
     array is not possible.

modules
     An associative array giving information about modules. The keys
     are the names of the modules loaded, registered to be autoloaded,
     or aliased. The value says which state the named module is in and
     is one of the strings `loaded', `autoloaded', or `alias:NAME',
     where NAME is the name the module is aliased to.

     Setting or unsetting keys in this array is not possible.

dirstack
     A normal array holding the elements of the directory stack. Note
     that the output of the dirs builtin command includes one more
     directory, the current working directory.

history
     This associative array maps history event numbers to the full
     history lines.

historywords
     A special array containing the words stored in the history.

jobdirs
     This associative array maps job numbers to the directories from
     which the job was started (which may not be the current directory
     of the job).

     The keys of the associative arrays are usually valid job numbers,
     and these are the values output with, for example, ${(k)jobdirs}.
     Non-numeric job references may be used when looking up a value;
     for example, ${jobdirs[%+]} refers to the current job.

jobtexts
     This associative array maps job numbers to the texts of the
     command lines that were used to start the jobs.

     Handling of the keys of the associative array is as described for
     jobdirs above.

jobstates
     This associative array gives information about the states of the
     jobs currently known. The keys are the job numbers and the values
     are strings of the form `JOB-STATE:MARK:PID=STATE...'. The
     JOB-STATE gives the state the whole job is currently in, one of
     `running', `suspended', or `done'. The MARK is `+' for the current
     job, `-' for the previous job and empty otherwise. This is
     followed by one `PID=STATE' for every process in the job. The PIDs
     are, of course, the process IDs and the STATE describes the state
     of that process.

     Handling of the keys of the associative array is as described for
     jobdirs above.

nameddirs
     This associative array maps the names of named directories to the
     pathnames they stand for.

userdirs
     This associative array maps user names to the pathnames of their
     home directories.

funcfiletrace
     This array contains the absolute line numbers and corresponding
     file names for the point where the current function, sourced file,
     or (if EVAL_LINENO is set) eval command was called.  The array is
     of the same length as funcsourcetrace and functrace, but differs
     from funcsourcetrace in that the line and file are the point of
     call, not the point of definition, and differs from functrace in
     that all values are absolute line numbers in files, rather than
     relative to the start of a function, if any.

funcsourcetrace
     This array contains the file names and line numbers of the points
     where the functions, sourced files, and (if EVAL_LINENO is set)
     eval commands currently being executed were defined.  The line
     number is the line where the `function NAME' or `NAME ()' started.
     In the case of an autoloaded function  the line number is reported
     as zero.  The format of each element is FILENAME:LINENO.  For
     functions autoloaded from a file in native zsh format, where only
     the body of the function occurs in the file, or for files that
     have been executed by the source or . builtins, the trace
     information is shown as FILENAME:0, since the entire file is the
     definition.

     Most users will be interested in the information in the
     funcfiletrace array instead.

funcstack
     This array contains the names of the functions, sourced files, and
     (if EVAL_LINENO is set) eval commands. currently being executed.
     The first element is the name of the function using the parameter.

functrace
     This array contains the names and line numbers of the callers
     corresponding to the functions currently being executed.  The
     format of each element is NAME:LINENO.  Callers are also shown for
     sourced files; the caller is the point where the source or .
     command was executed.



File: zsh.info,  Node: The zsh/pcre Module,  Next: The zsh/regex Module,  Prev: The zsh/parameter Module,  Up: Zsh Modules

22.17 The zsh/pcre Module
=========================



   The zsh/pcre module makes some commands available as builtins:


pcre_compile [ -aimx ] PCRE
     Compiles a perl-compatible regular expression.

     Option -a will force the pattern to be anchored.  Option -i will
     compile a case-insensitive pattern.  Option -m will compile a
     multi-line pattern; that is, ^ and $ will match newlines within
     the pattern.  Option -x will compile an extended pattern, wherein
     whitespace and # comments are ignored.

pcre_study
     Studies the previously-compiled PCRE which may result in faster
     matching.

pcre_match [ -v VAR ] [ -a ARR ] STRING
     Returns successfully if string matches the previously-compiled
     PCRE.

     If the expression captures substrings within parentheses,
     pcre_match will set the array $MATCH to those substrings, unless
     the -a option is given, in which case it will set the array ARR.
     Similarly, the variable MATCH will be set to the entire matched
     portion of the string, unless the -v option is given, in which
     case the variable VAR will be set.


The zsh/pcre module makes available the following test condition:
expr -pcre-match pcre
     Matches a string against a perl-compatible regular expression.

     For example,

     [[ "$text" -pcre-match ^d+$ ]] && print text variable contains
     only "d's".



File: zsh.info,  Node: The zsh/regex Module,  Next: The zsh/sched Module,  Prev: The zsh/pcre Module,  Up: Zsh Modules

22.18 The zsh/regex Module
==========================



   The zsh/regex module makes available the following test condition:
EXPR -regex-match REGEX
     Matches a string against a POSIX extended regular expression.  The
     matched portion of the string will normally be placed in the MATCH
     variable.  If there are any capturing parentheses within the
     regex, then the match array variable will contain those.

     For example,


          [[ alphabetical -regex-match ^a([^a]+)a([^a]+)a ]] &&
          print -l $MATCH X $match

     If the option REMATCH_PCRE is not set, then the =~ operator will
     automatically load this module as needed and will invoke the
     -regex-match operator.

     If BASH_REMATCH is set, then the array BASH_REMATCH will be set
     instead of MATCH and match.



File: zsh.info,  Node: The zsh/sched Module,  Next: The zsh/net/socket Module,  Prev: The zsh/regex Module,  Up: Zsh Modules

22.19 The zsh/sched Module
==========================



   The zsh/sched module makes available one builtin command and one
parameter.


sched [-o] [+]HH:MM[:SS] COMMAND ...
sched [-o] [+]SECONDS COMMAND ...
sched [ -ITEM ]
     Make an entry in the scheduled list of commands to execute.  The
     time may be specified in either absolute or relative time, and
     either as hours, minutes and (optionally) seconds separated by a
     colon, or seconds alone.  An absolute number of seconds indicates
     the time since the epoch (1970/01/01 00:00); this is useful in
     combination with the features in the zsh/datetime module, see
     *note The zsh/datetime Module::.

     With no arguments, prints the list of scheduled commands.  If the
     scheduled command has the -o flag set, this is shown at the start
     of the command.

     With the argument `-ITEM', removes the given item from the list.
     The numbering of the list is continuous and entries are in time
     order, so the numbering can change when entries are added or
     deleted.

     Commands are executed either immediately before a prompt, or while
     the shell's line editor is waiting for input.  In the latter case
     it is useful to be able to produce output that does not interfere
     with the line being edited.  Providing the option -o causes the
     shell to clear the command line before the event and redraw it
     afterwards.  This should be used with any scheduled event that
     produces visible output to the terminal; it is not needed, for
     example, with output that updates a terminal emulator's title bar.



zsh_scheduled_events
     A readonly array corresponding to the events scheduled by the
     sched builtin.  The indices of the array correspond to the numbers
     shown when sched is run with no arguments (provided that the
     KSH_ARRAYS option is not set).  The value of the array consists of
     the scheduled time in seconds since the epoch (see The
     zsh/datetime Module for facilities for using this number),
     followed by a colon, followed by any options (which may be empty
     but will be preceded by a `-' otherwise), followed by a colon,
     followed by the command to be executed.

     The sched builtin should be used for manipulating the events.  Note
     that this will have an immediate effect on the contents of the
     array, so that indices may become invalid.



File: zsh.info,  Node: The zsh/net/socket Module,  Next: The zsh/stat Module,  Prev: The zsh/sched Module,  Up: Zsh Modules

22.20 The zsh/net/socket Module
===============================



   The zsh/net/socket module makes available one builtin command:


zsocket [ -altv ] [ -d FD ] [ ARGS ]
     zsocket is implemented as a builtin to allow full use of shell
     command line editing, file I/O, and job control mechanisms.



22.20.1 Outbound Connections
----------------------------




zsocket [ -v ] [ -d FD ] FILENAME
     Open a new Unix domain connection to FILENAME.  The shell
     parameter REPLY will be set to the file descriptor associated with
     that connection.  Currently, only stream connections are supported.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     In order to elicit more verbose output, use -v.



22.20.2 Inbound Connections
---------------------------




zsocket -l [ -v ] [ -d FD ] FILENAME
     zsocket -l will open a socket listening on FILENAME.  The shell
     parameter REPLY will be set to the file descriptor associated with
     that listener.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     In order to elicit more verbose output, use -v.

zsocket -a [ -tv ] [ -d TARGETFD ] LISTENFD
     zsocket -a will accept an incoming connection to the socket
     associated with LISTENFD.  The shell parameter REPLY will be set
     to the file descriptor associated with the inbound connection.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     If -t is specified, zsocket will return if no incoming connection
     is pending.  Otherwise it will wait for one.

     In order to elicit more verbose output, use -v.



File: zsh.info,  Node: The zsh/stat Module,  Next: The zsh/system Module,  Prev: The zsh/net/socket Module,  Up: Zsh Modules

22.21 The zsh/stat Module
=========================



   The zsh/stat module makes available one builtin command under two
possible names:


zstat [ -gnNolLtTrs ] [ -f FD ] [ -H HASH ] [ -A ARRAY ] [ -F FMT ] [ +ELEMENT ] [ FILE ... ]
stat ...
     The command acts as a front end to the stat system call (see man
     page stat(2)).  The same command is provided with two names; as
     the name stat is often used by an external command it is
     recommended that only the zstat form of the command is used.  This
     can be arranged by loading the module with the command `zmodload
     -F zsh/stat b:zstat'.

     If the stat call fails, the appropriate system error message
     printed and status 1 is returned.  The fields of struct stat give
     information about the files provided as arguments to the command.
     In addition to those available from the stat call, an extra
     element `link' is provided.  These elements are:


    device
          The number of the device on which the file resides.

    inode
          The unique number of the file on this device (`_inode_'
          number).

    mode
          The mode of the file; that is, the file's type and access
          permissions.  With the -s option, this will be returned as a
          string corresponding to the first column in the display of
          the ls -l command.

    nlink
          The number of hard links to the file.

    uid
          The user ID of the owner of the file.  With the -s option,
          this is displayed as a user name.

    gid
          The group ID of the file.  With the -s option, this is
          displayed as a group name.

    rdev
          The raw device number.  This is only useful for special
          devices.

    size
          The size of the file in bytes.

    atime
    mtime
    ctime
          The last access, modification and inode change times of the
          file, respectively, as the number of seconds since midnight
          GMT on 1st January, 1970.  With the -s option, these are
          printed as strings for the local time zone; the format can be
          altered with the -F option, and with the -g option the times
          are in GMT.

    blksize
          The number of bytes in one allocation block on the device on
          which the file resides.

    block
          The number of disk blocks used by the file.

    link
          If the file is a link and the -L option is in effect, this
          contains the name of the file linked to, otherwise it is
          empty.  Note that if this element is selected (``zstat
          +link'') then the -L option is automatically used.


     A particular element may be selected by including its name
     preceded by a `+' in the option list; only one element is allowed.
     The element may be shortened to any unique set of leading
     characters.  Otherwise, all elements will be shown for all files.

     Options:


    -A ARRAY
          Instead of displaying the results on standard output, assign
          them to an ARRAY, one struct stat element per array element
          for each file in order.  In this case neither the name of the
          element nor the name of the files appears in ARRAY unless the
          -t or -n options were given, respectively.  If -t is given,
          the element name appears as a prefix to the appropriate array
          element; if -n is given, the file name appears as a separate
          array element preceding all the others.  Other formatting
          options are respected.

    -H HASH
          Similar to -A, but instead assign the values to HASH.  The
          keys are the elements listed above.  If the -n option is
          provided then the name of the file is included in the hash
          with key name.

    -f FD
          Use the file on file descriptor FD instead of named files; no
          list of file names is allowed in this case.

    -F FMT
          Supplies a strftime (see man page strftime(3)) string for the
          formatting of the time elements.  The -s option is implied.

    -g
          Show the time elements in the GMT time zone.  The -s option
          is implied.

    -l
          List the names of the type elements (to standard output or an
          array as appropriate) and return immediately; options other
          than -A and arguments are ignored.

    -L
          Perform an lstat (see man page lstat(2)) rather than a stat
          system call.  In this case, if the file is a link, information
          about the link itself rather than the target file is returned.
          This option is required to make the link element useful.

    -n
          Always show the names of files.  Usually these are only shown
          when output is to standard output and there is more than one
          file in the list.

    -N
          Never show the names of files.

    -o
          If a raw file mode is printed, show it in octal, which is
          more useful for human consumption than the default of
          decimal.  A leading zero will be printed in this case.  Note
          that this does not affect whether a raw or formatted file
          mode is shown, which is controlled by the -r and -s options,
          nor whether a mode is shown at all.

    -r
          Print raw data (the default format) alongside string data
          (the -s format); the string data appears in parentheses after
          the raw data.

    -s
          Print mode, uid, gid and the three time elements as strings
          instead of numbers.  In each case the format is like that of
          ls -l.

    -t
          Always show the type names for the elements of struct stat.
          Usually these are only shown when output is to standard
          output and no individual element has been selected.

    -T
          Never show the type names of the struct stat elements.




File: zsh.info,  Node: The zsh/system Module,  Next: The zsh/net/tcp Module,  Prev: The zsh/stat Module,  Up: Zsh Modules

22.22 The zsh/system Module
===========================



   The zsh/system module makes available three builtin commands and two
parameters.



22.23 Builtins
==============


syserror [ -e ERRVAR ] [ -p PREFIX ] [ ERRNO | ERRNAME ]
     This command prints out the error message associated with ERRNO, a
     system error number, followed by a newline to standard error.

     Instead of the error number, a name ERRNAME, for example ENOENT,
     may be used.  The set of names is the same as the contents of the
     array errnos, see below.

     If the string PREFIX is given, it is printed in front of the error
     message, with no intervening space.

     If ERRVAR is supplied, the entire message, without a newline, is
     assigned to the parameter names ERRVAR and nothing is output.

     A return status of 0 indicates the message was successfully printed
     (although it may not be useful if the error number was out of the
     system's range), a return status of 1 indicates an error in the
     parameters, and a return status of 2 indicates the error name was
     not recognised (no message is printed for this).

sysread [ -c COUNTVAR ] [ -i INFD ] [ -o OUTFD ]
[ -s BUFSIZE ] [ -t TIMEOUT ] [ PARAM ]
     Perform a single system read from file descriptor INFD, or zero if
     that is not given.  The result of the read is stored in PARAM or
     REPLY if that is not given.  If COUNTVAR is given, the number of
     bytes read is assigned to the parameter named by COUNTVAR.

     The maximum number of bytes read is BUFSIZE or 8192 if that is not
     given, however the command returns as soon as any number of bytes
     was successfully read.

     If TIMEOUT is given, it specifies a timeout in seconds, which may
     be zero to poll the file descriptor.  This is handled by the poll
     system call if available, otherwise the select system call if
     available.

     If OUTFD is given, an attempt is made to write all the bytes just
     read to the file descriptor OUTFD.  If this fails, because of a
     system error other than EINTR or because of an internal zsh error
     during an interrupt, the bytes read but not written are stored in
     the parameter named by PARAM if supplied (no default is used in
     this case), and the number of bytes read but not written is stored
     in the parameter named by COUNTVAR if that is supplied.  If it was
     successful, COUNTVAR contains the full number of bytes transferred,
     as usual, and PARAM is not set.

     The error EINTR (interrupted system call) is handled internally so
     that shell interrupts are transparent to the caller.  Any other
     error causes a return.

     The possible return statuses are
    0
          At least one byte of data was successfully read and, if
          appropriate, written.

    1
          There was an error in the parameters to the command.  This is
          the only error for which a message is printed to standard
          error.

    2
          There was an error on the read, or on polling the input file
          descriptor for a timeout.  The parameter ERRNO gives the
          error.

    3
          Data were successfully read, but there was an error writing
          them to OUTFD.  The parameter ERRNO gives the error.

    4
          The attempt to read timed out.  Note this does not set ERRNO
          as this is not a system error.

    5
          No system error occurred, but zero bytes were read.  This
          usually indicates end of file.  The parameters are set
          according to the usual rules; no write to OUTFD is attempted.


syswrite [ -c COUNTVAR ] [ -o OUTFD ] DATA
     The data (a single string of bytes) are written to the file
     descriptor OUTFD, or 1 if that is not given, using the write
     system call.  Multiple write operations may be used if the first
     does not write all the data.

     If COUNTVAR is given, the number of byte written is stored in the
     parameter named by COUNTVAR; this may not be the full length of
     DATA if an error occurred.

     The error EINTR (interrupted system call) is handled internally by
     retrying; otherwise an error causes the command to return.  For
     example, if the file descriptor is set to non-blocking output, an
     error EAGAIN (on some systems, EWOULDBLOCK) may result in the
     command returning early.

     The return status may be 0 for success, 1 for an error in the
     parameters to the command, or 2 for an error on the write; no
     error message is printed in the last case, but the parameter ERRNO
     will reflect the error that occurred.



22.24 Parameters
================


errnos
     A readonly array of the names of errors defined on the system.
     These are typically macros defined in C by including the system
     header file errno.h.  The index of each name (assuming the option
     KSH_ARRAYS is unset) corresponds to the error number.  Error
     numbers NUM before the last known error which have no name are
     given the name ENUM in the array.

     Note that aliases for errors are not handled; only the canonical
     name is used.

sysparams
     A readonly associative array.  The keys are:
    pid
          Returns the process ID of the current process, even in
          subshells.  Compare $$, which returns the process ID of the
          main shell process.

    ppid
          Returns the process ID of the parent of the current process,
          even in subshells.  Compare $PPID, which returns the process
          ID of the parent of the main shell process.




File: zsh.info,  Node: The zsh/net/tcp Module,  Next: The zsh/termcap Module,  Prev: The zsh/system Module,  Up: Zsh Modules

22.25 The zsh/net/tcp Module
============================



   The zsh/net/tcp module makes available one builtin command:


ztcp [ -acflLtv ] [ -d FD ] [ ARGS ]
     ztcp is implemented as a builtin to allow full use of shell
     command line editing, file I/O, and job control mechanisms.

     If ztcp is run with no options, it will output the contents of its
     session table.

     If it is run with only the option -L, it will output the contents
     of the session table in a format suitable for automatic parsing.
     The option is ignored if given with a command to open or close a
     session.  The output consists of a set of lines, one per session,
     each containing the following elements separated by spaces:


    File descriptor
          The file descriptor in use for the connection.  For normal
          inbound (I) and outbound (O) connections this may be read and
          written by the usual shell mechanisms.  However, it should
          only be close with `ztcp -c'.

    Connection type
          A letter indicating how the session was created:


         Z
               A session created with the zftp command.

         L
               A connection opened for listening with `ztcp -l'.

         I
               An inbound connection accepted with `ztcp -a'.

         O
               An outbound connection created with `ztcp HOST ...'.



    The local host
          This is usually set to an all-zero IP address as the address
          of the localhost is irrelevant.

    The local port
          This is likely to be zero unless the connection is for
          listening.

    The remote host
          This is the fully qualified domain name of the peer, if
          available, else an IP address.  It is an all-zero IP address
          for a session opened for listening.

    The remote port
          This is zero for a connection opened for listening.




22.25.1 Outbound Connections
----------------------------




ztcp [ -v ] [ -d FD ] HOST [ PORT ]
     Open a new TCP connection to HOST.  If the PORT is omitted, it
     will default to port 23.  The connection will be added to the
     session table and the shell parameter REPLY will be set to the
     file descriptor associated with that connection.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     In order to elicit more verbose output, use -v.



22.25.2 Inbound Connections
---------------------------




ztcp -l [ -v ] [ -d FD ] PORT
     ztcp -l will open a socket listening on TCP PORT.  The socket will
     be added to the session table and the shell parameter REPLY will
     be set to the file descriptor associated with that listener.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     In order to elicit more verbose output, use -v.

ztcp -a [ -tv ] [ -d TARGETFD ] LISTENFD
     ztcp -a will accept an incoming connection to the port associated
     with LISTENFD.  The connection will be added to the session table
     and the shell parameter REPLY will be set to the file descriptor
     associated with the inbound connection.

     If -d is specified, its argument will be taken as the target file
     descriptor for the connection.

     If -t is specified, ztcp will return if no incoming connection is
     pending.  Otherwise it will wait for one.

     In order to elicit more verbose output, use -v.



22.25.3 Closing Connections
---------------------------




ztcp -cf [ -v ] [ FD ]
ztcp -c [ -v ] [ FD ]
     ztcp -c will close the socket associated with FD.  The socket will
     be removed from the session table.  If FD is not specified, ztcp
     will close everything in the session table.

     Normally, sockets registered by zftp (see *note The zsh/zftp
     Module:: ) cannot be closed this way.  In order to force such a
     socket closed, use -f.

     In order to elicit more verbose output, use -v.



22.25.4 Example
---------------

Here is how to create a TCP connection between two instances of zsh.  We
need to pick an unassigned port; here we use the randomly chosen 5123.

On host1,
     zmodload zsh/net/tcp
     ztcp -l 5123
     listenfd=$REPLY
     ztcp -a $listenfd
     fd=$REPLY
   The second from last command blocks until there is an incoming
connection.

Now create a connection from host2 (which may, of course, be the same
machine):
     zmodload zsh/net/tcp
     ztcp host1 5123
     fd=$REPLY

Now on each host, $fd contains a file descriptor for talking to the
other.  For example, on host1:
     print This is a message >&$fd
   and on host2:
     read -r line <&$fd; print -r - $line
   prints `This is a message'.

To tidy up, on host1:
     ztcp -c $listenfd
     ztcp -c $fd
   and on host2
     ztcp -c $fd


File: zsh.info,  Node: The zsh/termcap Module,  Next: The zsh/terminfo Module,  Prev: The zsh/net/tcp Module,  Up: Zsh Modules

22.26 The zsh/termcap Module
============================



   The zsh/termcap module makes available one builtin command:


echotc CAP [ ARG ... ]
     Output the termcap value corresponding to the capability CAP, with
     optional arguments.


The zsh/termcap module makes available one parameter:


termcap
     An associative array that maps termcap capability codes to their
     values.


